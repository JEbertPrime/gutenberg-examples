/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateminimal_react_webpack_babel_setup"]("main",{

/***/ "./src/components/Chart.jsx":
/*!**********************************!*\
  !*** ./src/components/Chart.jsx ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Graph)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'chart.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'chart.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'chart.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), _toConsumableArray(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'chart.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));\nfunction Graph(_ref) {\n  var progress = _ref.progress;\n  var canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  var percent = Math.floor(progress * 100);\n  var myChart = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    var canvas = canvasRef.current;\n    var ctx = canvas.getContext(\"2d\");\n    myChart.current = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'chart.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(ctx, {\n      type: \"line\",\n      data: {\n        labels: [0],\n        datasets: [{\n          label: '',\n          data: [0],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        tooltips: {\n          callbacks: {\n            label: function label(tooltipItem) {\n              return tooltipItem.yLabel;\n            }\n          }\n        },\n        scales: {\n          x: {\n            ticks: {\n              display: false\n            },\n            y: {\n              ticks: {\n                display: false\n              }\n            }\n          }\n        }\n      }\n    });\n    return function () {\n      return myChart.current.destroy();\n    };\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    myChart.current.data.labels.push(percent);\n    myChart.current.data.datasets[0].data.push(percent);\n\n    if (percent === 0) {\n      myChart.current.data.labels = [0];\n      myChart.current.data.datasets[0].data = [0];\n    }\n\n    myChart.current.update();\n  }, [percent]);\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    height: \"500\",\n    ref: canvasRef\n  });\n}\n\n//# sourceURL=webpack://minimal-react-webpack-babel-setup/./src/components/Chart.jsx?");

/***/ }),

/***/ "./src/components/ChartSection.jsx":
/*!*****************************************!*\
  !*** ./src/components/ChartSection.jsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ChartSection)\n/* harmony export */ });\n/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! reactstrap */ \"./node_modules/reactstrap/es/Row.js\");\n/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! reactstrap */ \"./node_modules/reactstrap/es/Col.js\");\n/* harmony import */ var react_scrollmagic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-scrollmagic */ \"../node_modules/react-scrollmagic/dist/index.es.js\");\n/* harmony import */ var react_gsap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-gsap */ \"../node_modules/react-gsap/dist/react-gsap.esm.js\");\n/* harmony import */ var _Chart_jsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Chart.jsx */ \"./src/components/Chart.jsx\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! styled-components */ \"./node_modules/styled-components/dist/styled-components.browser.esm.js\");\nvar _templateObject, _templateObject2;\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\n\n\nvar ScrollItem = styled_components__WEBPACK_IMPORTED_MODULE_3__.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  text-align: center;\\n  top: \", \"px;\\n  left: 0;\\n  bottom: 0;\\n  right: 0;\\n  margin: auto;\\n  position: absolute;\\n\"])), function (props) {\n  return props.top - 50;\n});\nvar ScrollItemBox = styled_components__WEBPACK_IMPORTED_MODULE_3__.default.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  background: rgba(255, 255, 255, 0.6);\\n  padding: 2rem 2rem 1rem 2rem;\\n  width: max-content;\\n  margin: auto;\\n\"])));\nfunction ChartSection(props) {\n  return /*#__PURE__*/React.createElement(reactstrap__WEBPACK_IMPORTED_MODULE_4__.default, null, /*#__PURE__*/React.createElement(reactstrap__WEBPACK_IMPORTED_MODULE_5__.default, null, /*#__PURE__*/React.createElement(react_scrollmagic__WEBPACK_IMPORTED_MODULE_0__.Controller, null, /*#__PURE__*/React.createElement(react_scrollmagic__WEBPACK_IMPORTED_MODULE_0__.Scene, {\n    pin: true,\n    duration: 5000,\n    offset: 300\n  }, function (progress) {\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(_Chart_jsx__WEBPACK_IMPORTED_MODULE_2__.default, {\n      progress: progress\n    }), /*#__PURE__*/React.createElement(react_gsap__WEBPACK_IMPORTED_MODULE_1__.Timeline, {\n      playState: \"stop\",\n      totalProgress: progress,\n      target: /*#__PURE__*/React.createElement(React.Fragment, null, props.children.map(function (child) {\n        return /*#__PURE__*/React.createElement(ScrollItem, {\n          top: props.backgroundHeight / 2\n        }, /*#__PURE__*/React.createElement(ScrollItemBox, null, child));\n      }))\n    }, props.children.map(function (child, index) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(react_gsap__WEBPACK_IMPORTED_MODULE_1__.Tween, {\n        from: {\n          y: props.backgroundHeight - 200,\n          opacity: 0\n        },\n        to: {\n          y: 0,\n          opacity: 1\n        },\n        duration: 5,\n        target: index\n      }), /*#__PURE__*/React.createElement(react_gsap__WEBPACK_IMPORTED_MODULE_1__.Tween, {\n        duration: 5,\n        target: index\n      }), /*#__PURE__*/React.createElement(react_gsap__WEBPACK_IMPORTED_MODULE_1__.Tween, {\n        from: {\n          opacity: 1\n        },\n        to: {\n          opacity: 0\n        },\n        duration: 5,\n        target: index\n      }));\n    })));\n  }))));\n}\n\n//# sourceURL=webpack://minimal-react-webpack-babel-setup/./src/components/ChartSection.jsx?");

/***/ }),

/***/ "./src/containers/Heat.jsx":
/*!*********************************!*\
  !*** ./src/containers/Heat.jsx ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Heat)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! reactstrap */ \"./node_modules/reactstrap/es/Container.js\");\n/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! reactstrap */ \"./node_modules/reactstrap/es/Row.js\");\n/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! reactstrap */ \"./node_modules/reactstrap/es/Col.js\");\n/* harmony import */ var _components_ChartSection_jsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/ChartSection.jsx */ \"./src/components/ChartSection.jsx\");\n\n\n\n\nfunction Heat(props) {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(reactstrap__WEBPACK_IMPORTED_MODULE_2__.default, {\n    id: \"heat\",\n    style: {\n      marginTop: '2em'\n    }\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(reactstrap__WEBPACK_IMPORTED_MODULE_3__.default, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(reactstrap__WEBPACK_IMPORTED_MODULE_4__.default, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h2\", {\n    className: \"center\"\n  }, \"Increasing temperatures are a health issue.\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ChartSection_jsx__WEBPACK_IMPORTED_MODULE_1__.default, null));\n}\n\n//# sourceURL=webpack://minimal-react-webpack-babel-setup/./src/containers/Heat.jsx?");

/***/ }),

/***/ "../node_modules/react-gsap/dist/react-gsap.esm.js":
/*!*********************************************************!*\
  !*** ../node_modules/react-gsap/dist/react-gsap.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Controls\": () => (/* binding */ Controls),\n/* harmony export */   \"PlayState\": () => (/* binding */ PlayState),\n/* harmony export */   \"Reveal\": () => (/* binding */ Reveal),\n/* harmony export */   \"ScrollTrigger\": () => (/* binding */ ScrollTrigger),\n/* harmony export */   \"SplitChars\": () => (/* binding */ SplitChars),\n/* harmony export */   \"SplitLetters\": () => (/* binding */ SplitLetters),\n/* harmony export */   \"SplitWords\": () => (/* binding */ SplitWords),\n/* harmony export */   \"Timeline\": () => (/* binding */ Timeline),\n/* harmony export */   \"Tween\": () => (/* binding */ Tween)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"../../../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-is */ \"../node_modules/react-is/index.js\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap/dist/ScrollTrigger'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n\n\n\n\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nvar PlayState;\n\n(function (PlayState) {\n  PlayState[\"play\"] = \"play\";\n  PlayState[\"restart\"] = \"restart\";\n  PlayState[\"reverse\"] = \"reverse\";\n  PlayState[\"restartReverse\"] = \"restartReverse\";\n  PlayState[\"stop\"] = \"stop\";\n  PlayState[\"stopEnd\"] = \"stopEnd\";\n  PlayState[\"pause\"] = \"pause\";\n  PlayState[\"resume\"] = \"resume\";\n})(PlayState || (PlayState = {}));\n\nif (!String.prototype.startsWith) {\n  String.prototype.startsWith = function (searchString, position) {\n    position = position || 0;\n    return this.indexOf(searchString, position) === position;\n  };\n}\n\nvar setPlayState = function setPlayState(playState, prevPlayState, tween) {\n  if (tween === void 0) {\n    tween = null;\n  }\n\n  if (tween && playState && playState !== prevPlayState) {\n    if (playState === PlayState.play) {\n      tween.play();\n    } else if (playState === PlayState.restart) {\n      tween.restart(true);\n    } else if (playState === PlayState.reverse) {\n      tween.reverse();\n    } else if (playState === PlayState.restartReverse) {\n      tween.reverse(0);\n    } else if (playState === PlayState.stop) {\n      tween.pause(0);\n    } else if (playState === PlayState.stopEnd) {\n      tween.reverse(0);\n      tween.pause();\n    } else if (playState === PlayState.pause) {\n      tween.pause();\n    } else if (playState === PlayState.resume) {\n      tween.resume();\n    }\n  }\n};\n\nvar setInitialPlayState = function setInitialPlayState(tweenOrTimeline, props) {\n  var playState = props.playState;\n\n  if (playState) {\n    setPlayState(playState, PlayState.play, tweenOrTimeline);\n  }\n};\n\nvar getInitialPaused = function getInitialPaused(playState) {\n  return playState && (playState === PlayState.stop || playState === PlayState.stopEnd || playState === PlayState.pause);\n};\n\nvar getTweenFunction = function getTweenFunction(targets, props, context) {\n  var _context$getPlugins;\n\n  var _props$duration = props.duration,\n      duration = _props$duration === void 0 ? 1 : _props$duration,\n      from = props.from,\n      to = props.to,\n      stagger = props.stagger,\n      playState = props.playState,\n      onCompleteAll = props.onCompleteAll,\n      onCompleteAllParams = props.onCompleteAllParams,\n      onCompleteAllScope = props.onCompleteAllScope,\n      onStartAll = props.onStartAll,\n      vars = _objectWithoutPropertiesLoose(props, [\"children\", \"wrapper\", \"duration\", \"from\", \"to\", \"stagger\", \"progress\", \"totalProgress\", \"playState\", \"disabled\", \"onlyInvalidateTo\", \"onCompleteAll\", \"onCompleteAllParams\", \"onCompleteAllScope\", \"onStartAll\", \"position\", \"target\"]);\n\n  var tweenFunction;\n  var paused = getInitialPaused(playState);\n  var plugins = (_context$getPlugins = context === null || context === void 0 ? void 0 : context.getPlugins(context === null || context === void 0 ? void 0 : context.plugins, targets)) !== null && _context$getPlugins !== void 0 ? _context$getPlugins : {};\n\n  if (from && to) {\n    // special props like paused always go in the toVars parameter\n    tweenFunction = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(targets, from, _extends({\n      stagger: stagger,\n      duration: duration,\n      paused: paused\n    }, to, vars, plugins));\n  } else if (to) {\n    tweenFunction = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(targets, _extends({\n      stagger: stagger,\n      duration: duration,\n      paused: paused\n    }, to, vars, plugins));\n  } else {\n    tweenFunction = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(targets, _extends({\n      stagger: stagger,\n      duration: duration,\n      paused: paused\n    }, from, vars, plugins));\n  } // if multiple tweens (stagger), wrap them in a timeline\n  // TODO: if it's already an timeline add event handlers\n\n\n  if (Array.isArray(tweenFunction)) {\n    tweenFunction.forEach(function (t) {\n      t.paused(false);\n    });\n    tweenFunction = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(_extends({}, vars, {\n      tweens: tweenFunction,\n      smoothChildTiming: true,\n      onComplete: onCompleteAll,\n      onCompleteParams: onCompleteAllParams,\n      onCompleteScope: onCompleteAllScope,\n      onStart: onStartAll\n    }));\n  }\n\n  return tweenFunction;\n};\n\nvar isEqual = function isEqual(obj1, obj2) {\n  // very easy equal check\n  // attention: if the order of properties are different it returns false\n  return JSON.stringify(obj1) === JSON.stringify(obj2);\n};\n\n\nfunction getReactNode(dom, traverseUp) {\n  if (traverseUp === void 0) {\n    traverseUp = 0;\n  }\n\n  var key = Object.keys(dom !== null && dom !== void 0 ? dom : {}).find(function (key) {\n    return key.startsWith('__reactInternalInstance$') || key.startsWith('__reactFiber$');\n  });\n  var domFiber = key && dom[key];\n  if (!domFiber) return null; // react <16\n\n  if (domFiber._currentElement) {\n    var _compFiber = domFiber._currentElement._owner;\n\n    for (var i = 0; i < traverseUp; i++) {\n      _compFiber = _compFiber._currentElement._owner;\n    }\n\n    return _compFiber._instance;\n  } // react 16+\n\n\n  if (domFiber.stateNode) {\n    return domFiber.stateNode;\n  }\n\n  var getCompFiber = function getCompFiber(fiber) {\n    //return fiber._debugOwner; // this also works, but is __DEV__ only\n    var parentFiber = fiber[\"return\"];\n\n    while (typeof parentFiber.type == 'string') {\n      parentFiber = parentFiber[\"return\"];\n    }\n\n    return parentFiber;\n  };\n\n  var compFiber = getCompFiber(domFiber);\n\n  for (var _i = 0; _i < traverseUp; _i++) {\n    compFiber = getCompFiber(compFiber);\n  }\n\n  return compFiber.stateNode;\n}\n\nvar getRefProp = function getRefProp(child, addTarget) {\n  // has to be tested if it works, which lib does still use innerRef?\n  if (child.props.innerRef) {\n    return {\n      innerRef: function innerRef(target) {\n        addTarget(target);\n        var innerRef = child.props.innerRef;\n        if (typeof innerRef === 'function') innerRef(target);else if (innerRef) innerRef.current = target;\n      }\n    };\n  }\n\n  return {\n    ref: function ref(target) {\n      addTarget(target);\n      var ref = child.ref;\n      if (typeof ref === 'function') ref(target);else if (ref) ref.current = target;\n    }\n  };\n};\n\nvar setOrAddTarget = function setOrAddTarget(target, setTarget, addTarget) {\n  var reactNode = getReactNode(target);\n\n  if (reactNode) {\n    addTarget(reactNode);\n  } else if (target) {\n    Object.keys(target).forEach(function (key) {\n      var elementRef = target[key];\n\n      if (typeof elementRef === 'object' && elementRef.current) {\n        if (Array.isArray(elementRef.current)) {\n          elementRef.current.forEach(function (singleRef) {\n            setTarget(key, singleRef);\n          });\n        } else {\n          setTarget(key, elementRef.current);\n        }\n      }\n    });\n  }\n};\n\nvar getTargetRefProp = function getTargetRefProp(child, setTarget, addTarget) {\n  // has to be tested if it works, which lib does still use innerRef?\n  if (child.props.innerRef) {\n    return {\n      innerRef: function innerRef(target) {\n        setOrAddTarget(target, setTarget, addTarget); // merge refs\n\n        var innerRef = child.props.innerRef;\n        if (typeof innerRef === 'function') innerRef(target);else if (innerRef) innerRef.current = target;\n      }\n    };\n  }\n\n  return {\n    ref: function ref(target) {\n      setOrAddTarget(target, setTarget, addTarget); // merge refs\n\n      var ref = child.ref;\n      if (typeof ref === 'function') ref(target);else if (ref) ref.current = target;\n    }\n  };\n};\n\nvar nullishCoalescing = function nullishCoalescing(value, ifNullish) {\n  if (value === null || typeof value === 'undefined') {\n    return ifNullish;\n  }\n\n  return value;\n};\n\nvar setProps = function setProps(tweenOrTimeline, props, prevProps) {\n  if (props.progress !== undefined && props.progress !== (prevProps === null || prevProps === void 0 ? void 0 : prevProps.progress)) {\n    tweenOrTimeline.progress(props.progress);\n  }\n\n  if (props.totalProgress !== undefined && props.totalProgress !== (prevProps === null || prevProps === void 0 ? void 0 : prevProps.totalProgress)) {\n    tweenOrTimeline.totalProgress(props.totalProgress);\n  }\n\n  if (tweenOrTimeline.duration !== undefined && props.duration && props.duration !== (prevProps === null || prevProps === void 0 ? void 0 : prevProps.duration)) {\n    tweenOrTimeline.duration(props.duration);\n  }\n};\n\nvar Context = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createContext({\n  registerConsumer: function registerConsumer() {},\n  getPlugins: function getPlugins() {},\n  plugins: {}\n});\n\nvar Provider = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Provider, _React$Component);\n\n  function Provider(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.consumers = [];\n    _this.plugins = {};\n    _this.registerConsumer = _this.registerConsumer.bind(_assertThisInitialized(_this));\n    _this.getContextValue = _this.getContextValue.bind(_assertThisInitialized(_this));\n    _this.getPlugin = _this.getPlugin.bind(_assertThisInitialized(_this));\n    _this.getPlugins = _this.getPlugins.bind(_assertThisInitialized(_this));\n    _this.renderWithProvider = _this.renderWithProvider.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Provider.prototype;\n\n  _proto.registerConsumer = function registerConsumer(consumer) {\n    this.consumers.push(consumer);\n  };\n\n  _proto.getContextValue = function getContextValue(plugin) {\n    if (plugin === void 0) {\n      plugin = {};\n    }\n\n    return {\n      registerConsumer: this.registerConsumer,\n      // plugins: { ...this.context.plugins, ...plugin },\n      plugins: plugin,\n      getPlugins: this.getPlugins\n    };\n  };\n\n  _proto.getPlugin = function getPlugin(props, targets) {\n    return {};\n  };\n\n  _proto.getPlugins = function getPlugins(plugins, targets) {\n    var _this2 = this;\n\n    return Object.keys(plugins !== null && plugins !== void 0 ? plugins : {}).reduce(function (acc, plugin) {\n      if (Object.prototype.hasOwnProperty.call(plugins, plugin)) {\n        var _extends2;\n\n        // @ts-ignore\n        return _extends({}, acc, (_extends2 = {}, _extends2[plugin] = _this2.getPlugin(plugins[plugin], targets), _extends2));\n      }\n\n      return acc;\n    }, {});\n  };\n\n  _proto.renderWithProvider = function renderWithProvider(output, plugin) {\n    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Context.Provider, {\n      value: this.getContextValue(plugin)\n    }, output);\n  };\n\n  return Provider;\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nProvider.contextType = Context;\n\nvar gsap;\n\nvar _interpolate;\n\nvar _getProp;\n\nvar _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== 'undefined' && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n};\n\nfunction getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n\nfunction getCircleLength(el) {\n  return 2 * Math.PI * parseFloat(nullishCoalescing(el.getAttribute('r'), '1') || '0');\n}\n\nfunction getRectLength(el) {\n  return parseFloat(nullishCoalescing(el.getAttribute('width'), '1') || '0') * 2 + parseFloat(nullishCoalescing(el.getAttribute('height'), '1') || '0') * 2;\n}\n\nfunction getLineLength(el) {\n  return getDistance({\n    x: parseFloat(nullishCoalescing(el.getAttribute('x1'), '1') || '0'),\n    y: parseFloat(nullishCoalescing(el.getAttribute('y1'), '1') || '0')\n  }, {\n    x: parseFloat(nullishCoalescing(el.getAttribute('x2'), '1') || '0'),\n    y: parseFloat(nullishCoalescing(el.getAttribute('y2'), '1') || '0')\n  });\n}\n\nfunction getPolylineLength(el) {\n  var points = el.points;\n  var totalLength = 0;\n  var previousPos = undefined;\n\n  for (var i = 0; i < points.numberOfItems; i++) {\n    var currentPos = points.getItem(i);\n    if (previousPos) totalLength += getDistance(previousPos, currentPos);\n    previousPos = currentPos;\n  }\n\n  return totalLength;\n}\n\nfunction getPolygonLength(el) {\n  var points = el.points;\n  return getPolylineLength(el) + getDistance(points.getItem(points.numberOfItems - 1), points.getItem(0));\n} // if path is splitted into multiple move commands then return longest path\n\n\nfunction getPathLength(el) {\n  if (!el.hasAttribute('d')) {\n    return el.getTotalLength();\n  }\n\n  var d = el.getAttribute('d');\n  var pathString = d ? d.replace(/m/gi, 'M') : null;\n\n  if (!pathString) {\n    return el.getTotalLength();\n  }\n\n  var paths = pathString.split('M').filter(function (path) {\n    return path !== '';\n  }).map(function (path) {\n    return \"M\" + path;\n  });\n\n  if (paths.length === 1) {\n    return el.getTotalLength();\n  }\n\n  var maxLength = 0;\n  paths.forEach(function (path) {\n    var pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    pathElement.setAttribute('d', path);\n    maxLength = Math.max(maxLength, pathElement.getTotalLength());\n  });\n  return maxLength;\n}\n\nfunction getTotalLength(el) {\n  if (el.getTotalLength) {\n    return getPathLength(el);\n  }\n\n  switch (el.tagName.toLowerCase()) {\n    case 'circle':\n      return getCircleLength(el);\n\n    case 'rect':\n      return getRectLength(el);\n\n    case 'line':\n      return getLineLength(el);\n\n    case 'polyline':\n      return getPolylineLength(el);\n\n    case 'polygon':\n      return getPolygonLength(el);\n\n    default:\n      return 0;\n  }\n}\n\nvar SvgDrawPlugin = {\n  version: '2.0.0',\n  name: 'svgDraw',\n  register: function register(core, Plugin, propTween) {\n    gsap = core;\n    _interpolate = gsap.utils.interpolate;\n    _getProp = gsap.getProperty;\n  },\n  init: function init(target, value, _tween, index, targets) {\n    var length = getTotalLength(target);\n    var lengthParam = value;\n    var offsetParam = 0;\n\n    if (Array.isArray(value)) {\n      lengthParam = value[0];\n\n      if (value.length >= 2) {\n        offsetParam = value[1] * -1;\n      }\n    }\n\n    var data = this;\n    data.target = target;\n    data.strokeDashoffset = _interpolate(_getProp(target, 'stroke-dashoffset'), length * offsetParam);\n    data.strokeDasharray = _interpolate(_getProp(target, 'stroke-dasharray'), [lengthParam * length, length]);\n  },\n  render: function render(progress, data) {\n    data.target.setAttribute('stroke-dashoffset', data.strokeDashoffset(progress));\n    data.target.setAttribute('stroke-dasharray', data.strokeDasharray(progress));\n  }\n};\n_getGSAP() && gsap.registerPlugin(SvgDrawPlugin);\n\nvar gsap$1;\n\nvar _interpolate$1;\n\nvar _format;\n\nvar _getGSAP$1 = function _getGSAP() {\n  return gsap$1 || typeof window !== 'undefined' && (gsap$1 = window.gsap) && gsap$1.registerPlugin && gsap$1;\n};\n\nvar CountPlugin = {\n  version: '1.0.0',\n  name: 'count',\n  register: function register(core, Plugin, propTween) {\n    gsap$1 = core;\n    _interpolate$1 = gsap$1.utils.interpolate;\n\n    _format = function _format(value) {\n      return parseInt(value.toString(), 10);\n    };\n  },\n  init: function init(target, value, _tween, index, targets) {\n    var inputValue = value;\n    var format = _format;\n\n    if (typeof value === 'object') {\n      inputValue = nullishCoalescing(value.value, 0);\n\n      if (value.format) {\n        format = value.format;\n      }\n    }\n\n    var initialCount = parseFloat(target.innerText);\n    var data = this;\n    data.target = target;\n    data.count = _interpolate$1(initialCount, parseFloat(inputValue.toString()));\n    data.format = format;\n  },\n  render: function render(progress, data) {\n    data.target.innerText = data.format(data.count(progress));\n  }\n};\n_getGSAP$1() && gsap$1.registerPlugin(CountPlugin);\n\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(SvgDrawPlugin); // @ts-ignore\n\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(CountPlugin);\n\nvar Tween = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Tween, _React$Component);\n\n  function Tween(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.targets = [];\n    _this.addTarget = _this.addTarget.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Tween.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.createTween(); // props at mount\n\n    setProps(this.tween, this.props);\n    setInitialPlayState(this.tween, this.props);\n    this.context.registerConsumer(this);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.tween) {\n      this.tween.kill();\n    }\n  };\n\n  _proto.getSnapshotBeforeUpdate = function getSnapshotBeforeUpdate() {\n    this.targets = [];\n    return null;\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props = this.props,\n        children = _this$props.children,\n        to = _this$props.to,\n        playState = _this$props.playState,\n        disabled = _this$props.disabled,\n        onlyInvalidateTo = _this$props.onlyInvalidateTo,\n        vars = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"wrapper\", \"duration\", \"from\", \"to\", \"stagger\", \"progress\", \"totalProgress\", \"playState\", \"disabled\", \"onlyInvalidateTo\", \"onCompleteAll\", \"onCompleteAllParams\", \"onCompleteAllScope\", \"onStartAll\", \"position\", \"target\"]); // if children change create a new tween\n    // TODO: replace easy length check with fast equal check\n\n\n    if (react__WEBPACK_IMPORTED_MODULE_0___default().Children.count(prevProps.children) !== react__WEBPACK_IMPORTED_MODULE_0___default().Children.count(children)) {\n      this.createTween();\n    }\n\n    if (disabled) {\n      return;\n    } // execute function calls\n\n\n    setProps(this.tween, this.props, prevProps); // if \"to\" props are changed: reinit and restart tween\n\n    if (!isEqual(to, prevProps.to)) {\n      // is Tween\n      if (!this.tween.getChildren) {\n        this.tween.vars = _extends({}, to, vars);\n\n        if (onlyInvalidateTo) {\n          var progressTmp = this.tween.progress();\n          this.tween.progress(0).invalidate().progress(progressTmp);\n        } else {\n          this.tween.invalidate();\n        }\n      } // is Timeline\n      // TODO: not yet ready\n      else {\n          var delay = 0;\n          this.tween.getChildren(false, true, false).forEach(function (tween) {\n            tween.vars = _extends({}, to, vars, {\n              delay: delay\n            });\n            tween.invalidate(); // delay += stagger || 0;\n          });\n        }\n\n      if (!this.tween.paused()) {\n        this.tween.restart();\n      }\n    }\n\n    setPlayState(playState, prevProps.playState, this.tween);\n  };\n\n  _proto.createTween = function createTween() {\n    if (this.tween) {\n      this.tween.kill();\n    }\n\n    if (this.props.children) {\n      this.tween = getTweenFunction(this.targets, this.props, this.context);\n    } else {\n      // why this is needed?\n      this.tween = function () {};\n    }\n  };\n\n  _proto.getGSAP = function getGSAP() {\n    return this.tween;\n  };\n\n  _proto.setGSAP = function setGSAP(tween) {\n    this.tween = tween;\n  };\n\n  _proto.addTarget = function addTarget(target) {\n    // target is null at unmount\n    if (target !== null) {\n      this.targets.push(target);\n    }\n  };\n\n  _proto.getTargets = function getTargets() {\n    return this.targets;\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        wrapper = _this$props2.wrapper;\n    var output = react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default().Children.map(children, function (child) {\n      return react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(child, getRefProp(child, _this2.addTarget));\n    }));\n\n    if (wrapper) {\n      return react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(wrapper, [], output);\n    }\n\n    return output;\n  };\n\n  return Tween;\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nTween.displayName = 'Tween';\nTween.contextType = Context;\n\nvar Timeline = /*#__PURE__*/function (_Provider) {\n  _inheritsLoose(Timeline, _Provider);\n\n  function Timeline(props) {\n    var _this;\n\n    _this = _Provider.call(this, props) || this;\n    _this.targets = new Map();\n    _this.addTarget = _this.addTarget.bind(_assertThisInitialized(_this));\n    _this.setTarget = _this.setTarget.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Timeline.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.createTimeline(); // props at mount\n\n    setProps(this.timeline, this.props);\n    setInitialPlayState(this.timeline, this.props);\n    this.context.registerConsumer(this);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.timeline.kill();\n  };\n\n  _proto.getSnapshotBeforeUpdate = function getSnapshotBeforeUpdate() {\n    this.targets = new Map();\n    return null;\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props = this.props,\n        children = _this$props.children,\n        playState = _this$props.playState;\n // if children change create a new timeline\n    // TODO: replace easy length check with fast equal check\n    // TODO: same for props.target?\n\n    if (react__WEBPACK_IMPORTED_MODULE_0___default().Children.count(prevProps.children) !== react__WEBPACK_IMPORTED_MODULE_0___default().Children.count(children)) {\n      this.createTimeline();\n    } // execute function calls\n\n\n    setProps(this.timeline, this.props, prevProps); // TODO: need rerender or something if target change?\n    // if (target !== prevProps.target) {\n    //   this.forceUpdate();\n    // }\n\n    setPlayState(playState, prevProps.playState, this.timeline);\n  };\n\n  _proto.createTimeline = function createTimeline() {\n    var _this$context$getPlug,\n        _this$context,\n        _this$context2,\n        _this2 = this;\n\n    var _this$props2 = this.props,\n        playState = _this$props2.playState,\n        labels = _this$props2.labels,\n        vars = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"target\", \"duration\", \"progress\", \"totalProgress\", \"playState\", \"labels\", \"position\"]);\n\n    if (this.timeline) {\n      this.timeline.kill();\n    }\n\n    var plugins = (_this$context$getPlug = (_this$context = this.context) === null || _this$context === void 0 ? void 0 : _this$context.getPlugins((_this$context2 = this.context) === null || _this$context2 === void 0 ? void 0 : _this$context2.plugins, this.targets)) !== null && _this$context$getPlug !== void 0 ? _this$context$getPlug : {}; // init timeline\n\n    this.timeline = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(_extends({\n      smoothChildTiming: true,\n      paused: getInitialPaused(playState)\n    }, vars, plugins));\n\n    if (labels) {\n      labels.forEach(function (label) {\n        _this2.timeline.addLabel(label.label, label.position);\n      });\n    } // add tweens or nested timelines to timeline\n\n\n    this.consumers.forEach(function (consumer) {\n      // Tween with no children -> control Timeline target\n      if (consumer.tween && !consumer.props.children) {\n        var _consumer$props = consumer.props,\n            _position = _consumer$props.position,\n            _target = _consumer$props.target,\n            stagger = _consumer$props.stagger,\n            _vars = _objectWithoutPropertiesLoose(_consumer$props, [\"position\", \"target\", \"stagger\"]); // get target if not nullish\n\n\n        var targets = null;\n\n        if (_target !== null && typeof _target !== 'undefined') {\n          targets = _this2.targets.get(_target);\n        } // if no target found -> take all Timeline targets as target\n\n\n        var tween = getTweenFunction( // @ts-ignore\n        nullishCoalescing(targets, Array.from(_this2.targets.values())), _extends({\n          stagger: stagger\n        }, _vars));\n\n        _this2.timeline.add(tween, nullishCoalescing(_position, '+=0'));\n\n        consumer.setGSAP(tween);\n      } else {\n        var _position2 = consumer.props.position;\n\n        _this2.timeline.add(consumer.getGSAP(), nullishCoalescing(_position2, '+=0'));\n      }\n    });\n  };\n\n  _proto.getGSAP = function getGSAP() {\n    return this.timeline;\n  };\n\n  _proto.addTarget = function addTarget(target) {\n    if (target !== null) {\n      this.targets.set(this.targets.size, target);\n    }\n  };\n\n  _proto.setTarget = function setTarget(key, target) {\n    if (target !== null) {\n      if (this.targets.has(key)) {\n        var targets = this.targets.get(key);\n\n        if (Array.isArray(targets)) {\n          this.targets.set(key, [].concat(targets, [target]));\n        } else {\n          this.targets.set(key, [targets, target]);\n        }\n      } else {\n        this.targets.set(key, target);\n      }\n    }\n  };\n\n  _proto.setTargets = function setTargets(targets) {\n    this.targets = targets;\n  };\n\n  _proto.getTargets = function getTargets() {\n    return this.targets;\n  };\n\n  _proto.cloneElement = function cloneElement(child) {\n    // @ts-ignore\n    return react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(child, getTargetRefProp(child, this.setTarget, this.addTarget));\n  };\n\n  _proto.renderTarget = function renderTarget(target) {\n    var _this3 = this;\n\n    if (!target) {\n      return null;\n    } // if is forwardRef clone and pass targets as ref\n\n\n    if ((0,react_is__WEBPACK_IMPORTED_MODULE_2__.isForwardRef)(target)) {\n      return this.cloneElement(target);\n    } // else iterate the first level of children and set targets\n\n\n    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default().Children.map(target, function (child) {\n      if ((0,react_is__WEBPACK_IMPORTED_MODULE_2__.isFragment)(child)) {\n        return react__WEBPACK_IMPORTED_MODULE_0___default().Children.map(child.props.children, function (fragmentChild) {\n          return _this3.cloneElement(fragmentChild);\n        });\n      }\n\n      return _this3.cloneElement(child);\n    }));\n  };\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        target = _this$props3.target,\n        children = _this$props3.children,\n        wrapper = _this$props3.wrapper;\n    var renderedTarget = this.renderTarget(target);\n    var output = react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, renderedTarget, children);\n\n    if (wrapper) {\n      output = react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(wrapper, [], output);\n    }\n\n    return this.renderWithProvider(output);\n  };\n\n  return Timeline;\n}(Provider);\n\nTimeline.displayName = 'Timeline';\nTimeline.defaultProps = {\n  playState: PlayState.play\n};\n\nvar EntryState;\n\n(function (EntryState) {\n  EntryState[EntryState[\"unknown\"] = 0] = \"unknown\";\n  EntryState[EntryState[\"entered\"] = 1] = \"entered\";\n  EntryState[EntryState[\"exited\"] = 2] = \"exited\";\n})(EntryState || (EntryState = {}));\n\nvar Reveal = /*#__PURE__*/function (_Provider) {\n  _inheritsLoose(Reveal, _Provider);\n\n  function Reveal() {\n    var _this;\n\n    _this = _Provider.apply(this, arguments) || this;\n    _this.triggerRef = null;\n    _this.observer = null;\n\n    _this.intersectionObserverCallback = function (entries) {\n      var _this$props = _this.props,\n          repeat = _this$props.repeat,\n          threshold = _this$props.threshold;\n      var state = EntryState.unknown;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {\n        var entry = _step.value;\n\n        if (entry.isIntersecting && entry.intersectionRatio >= threshold) {\n          _this.timeline.play();\n\n          state = EntryState.entered;\n          break;\n        } else if (!entry.isIntersecting) {\n          state = EntryState.exited;\n          break;\n        }\n      }\n\n      if (!repeat && state === EntryState.entered) {\n        _this.killIntersectionObserver();\n      } else if (repeat && state === EntryState.exited) {\n        _this.timeline.pause(0);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = Reveal.prototype;\n\n  _proto.init = function init() {\n    this.createTimeline();\n    this.createIntersectionObserver();\n  };\n\n  _proto.kill = function kill() {\n    this.killTimeline();\n    this.killIntersectionObserver();\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.init();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.kill();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        trigger = _this$props2.trigger; // if children change create a new timeline\n    // TODO: replace easy length check with fast equal check\n    // TODO: same for props.target?\n\n    if (react__WEBPACK_IMPORTED_MODULE_0___default().Children.count(prevProps.children) !== react__WEBPACK_IMPORTED_MODULE_0___default().Children.count(children)) {\n      this.init();\n    }\n\n    if (prevProps.trigger !== trigger) {\n      this.init();\n    }\n  };\n\n  _proto.createTimeline = function createTimeline() {\n    var _this2 = this;\n\n    this.killTimeline(); // init timeline\n\n    this.timeline = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n      smoothChildTiming: true,\n      paused: true\n    }); // add consumers\n\n    this.consumers.forEach(function (consumer) {\n      var position = consumer.props.position;\n\n      _this2.timeline.add(consumer.getGSAP().play(), nullishCoalescing(position, 0));\n    });\n  };\n\n  _proto.killTimeline = function killTimeline() {\n    if (this.timeline) {\n      this.timeline.kill();\n    }\n  };\n\n  _proto.createIntersectionObserver = function createIntersectionObserver() {\n    var _this3 = this;\n\n    var _this$props3 = this.props,\n        root = _this$props3.root,\n        rootMargin = _this$props3.rootMargin,\n        threshold = _this$props3.threshold;\n    var options = {\n      root: root,\n      rootMargin: rootMargin,\n      threshold: [0, threshold]\n    };\n    this.observer = new IntersectionObserver(this.intersectionObserverCallback, options); // It would be better if we wouldn't need an extra wrapper.\n    // But it can be problematic for example with a fadeInLeft animation\n    // were the element is out of the viewport in the initial state.\n    // In this case there wouldn't be an intersection..\n\n    if (!this.triggerRef) {\n      this.consumers.forEach(function (consumer) {\n        consumer.getTargets().forEach(function (target) {\n          _this3.observer && _this3.observer.observe(target);\n        });\n      });\n    } else {\n      this.observer && this.observer.observe(this.triggerRef);\n    }\n  };\n\n  _proto.killIntersectionObserver = function killIntersectionObserver() {\n    this.unobserveAll();\n    this.observer = null;\n  };\n\n  _proto.unobserveAll = function unobserveAll() {\n    var _this4 = this;\n\n    if (this.observer) {\n      if (!this.triggerRef) {\n        this.consumers.forEach(function (consumer) {\n          consumer.getTargets().forEach(function (target) {\n            _this4.observer && _this4.observer.unobserve(target);\n          });\n        });\n      } else {\n        this.observer && this.observer.unobserve(this.triggerRef);\n      }\n    }\n  };\n\n  _proto.getGSAP = function getGSAP() {\n    return this.timeline;\n  };\n\n  _proto.render = function render() {\n    var _this5 = this;\n\n    var _this$props4 = this.props,\n        children = _this$props4.children,\n        trigger = _this$props4.trigger;\n    var output = trigger ? react__WEBPACK_IMPORTED_MODULE_0___default().createElement(trigger.type, Object.assign({}, trigger.props, {\n      ref: function ref(trigger) {\n        return _this5.triggerRef = trigger;\n      }\n    }), children) : children;\n    return this.renderWithProvider(output);\n  };\n\n  return Reveal;\n}(Provider);\n\nReveal.displayName = 'Reveal';\nReveal.defaultProps = {\n  trigger: null,\n  repeat: false,\n  root: null,\n  rootMargin: '0px',\n  threshold: 0.66\n};\n\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap/dist/ScrollTrigger'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\nvar ScrollTrigger = /*#__PURE__*/function (_Provider) {\n  _inheritsLoose(ScrollTrigger, _Provider);\n\n  function ScrollTrigger(props) {\n    var _this;\n\n    _this = _Provider.call(this, props) || this;\n    _this.scrollTrigger = null;\n    _this.targets = {};\n    _this.getPlugin = _this.getPlugin.bind(_assertThisInitialized(_this));\n    return _this;\n  } // override and pass registerConsumer to next parent provider\n\n\n  var _proto = ScrollTrigger.prototype;\n\n  _proto.registerConsumer = function registerConsumer(consumer) {\n    this.context.registerConsumer(consumer);\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        scrollTrigger = _objectWithoutPropertiesLoose(_this$props, [\"children\"]);\n\n    if (!children) {\n      this.scrollTrigger = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gsap/dist/ScrollTrigger'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(scrollTrigger);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.scrollTrigger) {\n      this.scrollTrigger.kill();\n    }\n  } // componentDidUpdate(prevProps: ScrollTriggerProps) {\n  //   const { trigger } = this.props;\n  //\n  //   if (trigger !== prevProps.trigger) {\n  //     console.log('prevProps.trigger', prevProps.trigger);\n  //     console.log('trigger', trigger);\n  //   }\n  // }\n  ;\n\n  _proto.getGSAP = function getGSAP() {\n    return this.scrollTrigger;\n  };\n\n  _proto.getPlugin = function getPlugin(props, targets) {\n    var triggerProp = props.trigger,\n        scrollTrigger = _objectWithoutPropertiesLoose(props, [\"children\", \"trigger\"]);\n\n    var trigger = triggerProp;\n\n    if (targets instanceof Map) {\n      if (trigger) {\n        var target = targets.get(trigger);\n\n        if (target) {\n          trigger = target;\n        }\n      } else {\n        trigger = Array.from(targets.values());\n      }\n    } else if (!trigger) {\n      trigger = targets;\n    }\n\n    return _extends({\n      trigger: trigger\n    }, scrollTrigger);\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        scrollTrigger = _objectWithoutPropertiesLoose(_this$props2, [\"children\"]);\n\n    if (!children) {\n      return null;\n    }\n\n    return this.renderWithProvider(children, {\n      scrollTrigger: scrollTrigger\n    });\n  };\n\n  return ScrollTrigger;\n}(Provider);\n\nScrollTrigger.displayName = 'ScrollTrigger';\nScrollTrigger.contextType = Context;\n\nvar escapeRegExp = function escapeRegExp(regExp) {\n  var specialChars = ['$', '^', '*', '(', ')', '+', '[', ']', '{', '}', '\\\\', '|', '.', '?', '/'];\n  var regex = new RegExp('(\\\\' + specialChars.join('|\\\\') + ')', 'g');\n  return regExp.replace(regex, '\\\\$1');\n}; // TODO: possible or better to output all the refs as one array?\n\n\nvar SplitWords = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      wrapper = _ref.wrapper,\n      _ref$delimiter = _ref.delimiter,\n      delimiter = _ref$delimiter === void 0 ? ' ' : _ref$delimiter;\n\n  if (typeof children !== 'string') {\n    throw new Error('SplitWords only accepts a string as child.');\n  }\n\n  var words = children.split(new RegExp(\"(\" + escapeRegExp(delimiter) + \")\", 'g'));\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, words.map(function (word, i) {\n    if (delimiter === ' ' && word === delimiter) {\n      return react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), {\n        key: i\n      }, \" \");\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(wrapper, {\n      ref: ref,\n      key: i\n    }, word);\n  }));\n}); // TODO: possible or better to output all the refs as one array?\n\nvar SplitChars = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef(function (_ref2, ref) {\n  var children = _ref2.children,\n      wrapper = _ref2.wrapper;\n\n  if (typeof children !== 'string') {\n    throw new Error('SplitChars only accepts a string as child.');\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, children.split(/(?=(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))/).map(function (_char, i) {\n    // TODO: enhance check for space\n    if (_char === ' ') {\n      return react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), {\n        key: i\n      }, \" \");\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(wrapper, {\n      ref: ref,\n      key: i\n    }, _char);\n  }));\n});\nvar SplitLetters = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef(function (props, ref) {\n  console.warn('Deprecation warning: Use SplitChars instead of SplitLetters');\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(SplitChars, Object.assign({}, props, {\n    ref: ref\n  }));\n});\n\nvar Controls = /*#__PURE__*/function (_Provider) {\n  _inheritsLoose(Controls, _Provider);\n\n  function Controls() {\n    var _this;\n\n    _this = _Provider.apply(this, arguments) || this;\n    _this.sliderTouched = false;\n    _this.state = {\n      totalProgress: 0,\n      playState: undefined,\n      prevPlayState: undefined\n    };\n    _this.containerStyle = {\n      backgroundColor: '#f0f0f0',\n      padding: '10px 10px 0 10px',\n      marginTop: '10px',\n      position: 'relative',\n      zIndex: 2,\n      fontFamily: 'verdana, sans-serif',\n      fontSize: '16px',\n      border: '1px solid #ccc'\n    };\n    _this.buttonContainerStyle = {\n      margin: '0',\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-between'\n    };\n    _this.buttonStyle = {\n      border: '1px solid #999',\n      backgroundColor: '#f0f0f0',\n      padding: '5px',\n      margin: '10px 10px 10px 0',\n      cursor: 'pointer'\n    };\n    _this.sliderStyle = {\n      margin: '0',\n      width: '100%'\n    };\n    _this.playStateStyle = {\n      color: '#999',\n      margin: '10px 0',\n      fontSize: '14px'\n    };\n\n    _this.onUpdate = function () {\n      if (_this.gsap && _this.slider && !_this.sliderTouched) {\n        var totalProgress = _this.gsap.getGSAP().totalProgress();\n\n        _this.slider.value = totalProgress * 100;\n      }\n    };\n\n    _this.onChange = function (event) {\n      if (_this.gsap && _this.gsap.getGSAP()) {\n        _this.gsap.getGSAP().totalProgress(event.target.value / 100);\n      }\n    };\n\n    _this.setPlayState = function (state) {\n      _this.setState(function (prevState) {\n        return {\n          playState: state,\n          prevPlayState: prevState.playState\n        };\n      });\n    };\n\n    _this.getControls = function (_totalProgress, playState) {\n      return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: _this.containerStyle\n      }, react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n        ref: function ref(el) {\n          return _this.slider = el;\n        },\n        type: \"range\",\n        style: _this.sliderStyle,\n        step: \"0.001\",\n        onChange: function onChange(e) {\n          return _this.onChange(e);\n        },\n        onMouseDown: function onMouseDown() {\n          return _this.sliderTouched = true;\n        },\n        onMouseUp: function onMouseUp() {\n          return _this.sliderTouched = false;\n        }\n      }), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: _this.buttonContainerStyle\n      }, react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        type: \"button\",\n        style: _this.buttonStyle,\n        onClick: function onClick() {\n          return _this.setPlayState(PlayState.play);\n        }\n      }, \"Play\"), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        type: \"button\",\n        style: _this.buttonStyle,\n        onClick: function onClick() {\n          return _this.setPlayState(PlayState.reverse);\n        }\n      }, \"Reverse\"), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        type: \"button\",\n        style: _this.buttonStyle,\n        onClick: function onClick() {\n          return _this.setPlayState(PlayState.pause);\n        }\n      }, \"Pause\"), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        type: \"button\",\n        style: _this.buttonStyle,\n        onClick: function onClick() {\n          return _this.setPlayState(PlayState.stop);\n        }\n      }, \"Stop\")), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        style: _this.playStateStyle\n      }, playState)));\n    };\n\n    return _this;\n  }\n\n  var _proto = Controls.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.consumers.length) {\n      this.gsap = this.consumers[0];\n      var gsap = this.gsap.getGSAP();\n\n      if (gsap) {\n        gsap.eventCallback('onUpdate', this.onUpdate);\n\n        if (this.props.playState) {\n          this.setPlayState(this.props.playState);\n        } else {\n          // get child initial state\n          if (gsap.paused()) {\n            this.setPlayState(PlayState.pause);\n          } else if (gsap.reversed()) {\n            this.setPlayState(PlayState.reverse);\n          } else {\n            this.setPlayState(PlayState.play);\n          }\n        }\n\n        var totalProgress = gsap.totalProgress();\n        this.slider.value = totalProgress * 100;\n      }\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this.onUpdate();\n  };\n\n  _proto.render = function render() {\n    var children = this.props.children;\n    var _this$state = this.state,\n        totalProgress = _this$state.totalProgress,\n        playState = _this$state.playState,\n        prevPlayState = _this$state.prevPlayState;\n\n    if (this.gsap) {\n      setPlayState(playState, prevPlayState, this.gsap.getGSAP());\n    }\n\n    return this.renderWithProvider(react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, children, this.getControls(totalProgress, playState)));\n  };\n\n  return Controls;\n}(Provider);\n\n\n//# sourceMappingURL=react-gsap.esm.js.map\n\n\n//# sourceURL=webpack://minimal-react-webpack-babel-setup/../node_modules/react-gsap/dist/react-gsap.esm.js?");

/***/ }),

/***/ "../node_modules/react-is/cjs/react-is.development.js":
/*!************************************************************!*\
  !*** ../node_modules/react-is/cjs/react-is.development.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\nvar REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n}\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_ASYNC_MODE_TYPE:\n          case REACT_CONCURRENT_MODE_TYPE:\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n} // AsyncMode is deprecated along with isAsyncMode\n\nvar AsyncMode = REACT_ASYNC_MODE_TYPE;\nvar ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\nvar hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n    }\n  }\n\n  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n}\nfunction isConcurrentMode(object) {\n  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\n\nexports.AsyncMode = AsyncMode;\nexports.ConcurrentMode = ConcurrentMode;\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\nexports.isValidElementType = isValidElementType;\nexports.typeOf = typeOf;\n  })();\n}\n\n\n//# sourceURL=webpack://minimal-react-webpack-babel-setup/../node_modules/react-is/cjs/react-is.development.js?");

/***/ }),

/***/ "../node_modules/react-is/index.js":
/*!*****************************************!*\
  !*** ../node_modules/react-is/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ \"../node_modules/react-is/cjs/react-is.development.js\");\n}\n\n\n//# sourceURL=webpack://minimal-react-webpack-babel-setup/../node_modules/react-is/index.js?");

/***/ }),

/***/ "../node_modules/react-scrollmagic/dist/index.es.js":
/*!**********************************************************!*\
  !*** ../node_modules/react-scrollmagic/dist/index.es.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Controller\": () => (/* binding */ Controller),\n/* harmony export */   \"Scene\": () => (/* binding */ Scene)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"../../../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/*!\r\n * ScrollMagic v2.0.7 (2019-05-07)\r\n * The javascript library for magical scroll interactions.\r\n * (c) 2019 Jan Paepke (@janpaepke)\r\n * Project Website: http://scrollmagic.io\r\n * \r\n * @version 2.0.7\r\n * @license Dual licensed under MIT license and GPL.\r\n * @author Jan Paepke - e-mail@janpaepke.de\r\n *\r\n * @file ScrollMagic main library.\r\n */\n/**\r\n * @namespace ScrollMagic\r\n */\nvar windowMock = {};\nwindowMock.addEventListener = function () {};\n\nvar ScrollMagic = (function (window, document) {\n\n\tvar ScrollMagic = function ScrollMagic() {\n\t\t_util.log(2, '(COMPATIBILITY NOTICE) -> As of ScrollMagic 2.0.0 you need to use \\'new ScrollMagic.Controller()\\' to create a new controller instance. Use \\'new ScrollMagic.Scene()\\' to instance a scene.');\n\t};\n\n\tScrollMagic.version = \"2.0.7\";\n\n\t// TODO: temporary workaround for chrome's scroll jitter bug\n\twindow.addEventListener(\"mousewheel\", function () {});\n\n\t// global const\n\tvar PIN_SPACER_ATTRIBUTE = \"data-scrollmagic-pin-spacer\";\n\n\t/**\r\n  * The main class that is needed once per scroll container.\r\n  *\r\n  * @class\r\n  *\r\n  * @example\r\n  * // basic initialization\r\n  * var controller = new ScrollMagic.Controller();\r\n  *\r\n  * // passing options\r\n  * var controller = new ScrollMagic.Controller({container: \"#myContainer\", loglevel: 3});\r\n  *\r\n  * @param {object} [options] - An object containing one or more options for the controller.\r\n  * @param {(string|object)} [options.container=window] - A selector, DOM object that references the main container for scrolling.\r\n  * @param {boolean} [options.vertical=true] - Sets the scroll mode to vertical (`true`) or horizontal (`false`) scrolling.\r\n  * @param {object} [options.globalSceneOptions={}] - These options will be passed to every Scene that is added to the controller using the addScene method. For more information on Scene options see {@link ScrollMagic.Scene}.\r\n  * @param {number} [options.loglevel=2] Loglevel for debugging. Note that logging is disabled in the minified version of ScrollMagic.\r\n \t\t\t\t\t\t\t\t\t\t ** `0` => silent\r\n \t\t\t\t\t\t\t\t\t\t ** `1` => errors\r\n \t\t\t\t\t\t\t\t\t\t ** `2` => errors, warnings\r\n \t\t\t\t\t\t\t\t\t\t ** `3` => errors, warnings, debuginfo\r\n  * @param {boolean} [options.refreshInterval=100] - Some changes don't call events by default, like changing the container size or moving a scene trigger element.  \r\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t This interval polls these parameters to fire the necessary events.  \r\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t If you don't use custom containers, trigger elements or have static layouts, where the positions of the trigger elements don't change, you can set this to 0 disable interval checking and improve performance.\r\n  *\r\n  */\n\tScrollMagic.Controller = function (options) {\n\t\t/*\r\n   * ----------------------------------------------------------------\r\n   * settings\r\n   * ----------------------------------------------------------------\r\n   */\n\t\tvar NAMESPACE = 'ScrollMagic.Controller',\n\t\t    SCROLL_DIRECTION_FORWARD = 'FORWARD',\n\t\t    SCROLL_DIRECTION_REVERSE = 'REVERSE',\n\t\t    SCROLL_DIRECTION_PAUSED = 'PAUSED',\n\t\t    DEFAULT_OPTIONS = CONTROLLER_OPTIONS.defaults;\n\n\t\t/*\r\n   * ----------------------------------------------------------------\r\n   * private vars\r\n   * ----------------------------------------------------------------\r\n   */\n\t\tvar Controller = this,\n\t\t    _options = _util.extend({}, DEFAULT_OPTIONS, options),\n\t\t    _sceneObjects = [],\n\t\t    _updateScenesOnNextCycle = false,\n\t\t    // can be boolean (true => all scenes) or an array of scenes to be updated\n\t\t_scrollPos = 0,\n\t\t    _scrollDirection = SCROLL_DIRECTION_PAUSED,\n\t\t    _isDocument = true,\n\t\t    _viewPortSize = 0,\n\t\t    _enabled = true,\n\t\t    _updateTimeout,\n\t\t    _refreshTimeout;\n\n\t\t/*\r\n   * ----------------------------------------------------------------\r\n   * private functions\r\n   * ----------------------------------------------------------------\r\n   */\n\n\t\t/**\r\n   * Internal constructor function of the ScrollMagic Controller\r\n   * @private\r\n   */\n\t\tvar construct = function construct() {\n\t\t\tfor (var key in _options) {\n\t\t\t\tif (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n\t\t\t\t\tlog(2, \"WARNING: Unknown option \\\"\" + key + \"\\\"\");\n\t\t\t\t\tdelete _options[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\t_options.container = _util.get.elements(_options.container)[0];\n\t\t\t// check ScrollContainer\n\t\t\tif (!_options.container) {\n\t\t\t\tlog(1, \"ERROR creating object \" + NAMESPACE + \": No valid scroll container supplied\");\n\t\t\t\tthrow NAMESPACE + \" init failed.\"; // cancel\n\t\t\t}\n\t\t\t_isDocument = _options.container === window || _options.container === document.body || !document.body.contains(_options.container);\n\t\t\t// normalize to window\n\t\t\tif (_isDocument) {\n\t\t\t\t_options.container = window;\n\t\t\t}\n\t\t\t// update container size immediately\n\t\t\t_viewPortSize = getViewportSize();\n\t\t\t// set event handlers\n\t\t\t_options.container.addEventListener(\"resize\", onChange);\n\t\t\t_options.container.addEventListener(\"scroll\", onChange);\n\n\t\t\tvar ri = parseInt(_options.refreshInterval, 10);\n\t\t\t_options.refreshInterval = _util.type.Number(ri) ? ri : DEFAULT_OPTIONS.refreshInterval;\n\t\t\tscheduleRefresh();\n\n\t\t\tlog(3, \"added new \" + NAMESPACE + \" controller (v\" + ScrollMagic.version + \")\");\n\t\t};\n\n\t\t/**\r\n   * Schedule the next execution of the refresh function\r\n   * @private\r\n   */\n\t\tvar scheduleRefresh = function scheduleRefresh() {\n\t\t\tif (_options.refreshInterval > 0) {\n\t\t\t\t_refreshTimeout = window.setTimeout(refresh, _options.refreshInterval);\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * Default function to get scroll pos - overwriteable using `Controller.scrollPos(newFunction)`\r\n   * @private\r\n   */\n\t\tvar getScrollPos = function getScrollPos() {\n\t\t\treturn _options.vertical ? _util.get.scrollTop(_options.container) : _util.get.scrollLeft(_options.container);\n\t\t};\n\n\t\t/**\r\n   * Returns the current viewport Size (width vor horizontal, height for vertical)\r\n   * @private\r\n   */\n\t\tvar getViewportSize = function getViewportSize() {\n\t\t\treturn _options.vertical ? _util.get.height(_options.container) : _util.get.width(_options.container);\n\t\t};\n\n\t\t/**\r\n   * Default function to set scroll pos - overwriteable using `Controller.scrollTo(newFunction)`\r\n   * Make available publicly for pinned mousewheel workaround.\r\n   * @private\r\n   */\n\t\tvar setScrollPos = this._setScrollPos = function (pos) {\n\t\t\tif (_options.vertical) {\n\t\t\t\tif (_isDocument) {\n\t\t\t\t\twindow.scrollTo(_util.get.scrollLeft(), pos);\n\t\t\t\t} else {\n\t\t\t\t\t_options.container.scrollTop = pos;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (_isDocument) {\n\t\t\t\t\twindow.scrollTo(pos, _util.get.scrollTop());\n\t\t\t\t} else {\n\t\t\t\t\t_options.container.scrollLeft = pos;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * Handle updates in cycles instead of on scroll (performance)\r\n   * @private\r\n   */\n\t\tvar updateScenes = function updateScenes() {\n\t\t\tif (_enabled && _updateScenesOnNextCycle) {\n\t\t\t\t// determine scenes to update\n\t\t\t\tvar scenesToUpdate = _util.type.Array(_updateScenesOnNextCycle) ? _updateScenesOnNextCycle : _sceneObjects.slice(0);\n\t\t\t\t// reset scenes\n\t\t\t\t_updateScenesOnNextCycle = false;\n\t\t\t\tvar oldScrollPos = _scrollPos;\n\t\t\t\t// update scroll pos now instead of onChange, as it might have changed since scheduling (i.e. in-browser smooth scroll)\n\t\t\t\t_scrollPos = Controller.scrollPos();\n\t\t\t\tvar deltaScroll = _scrollPos - oldScrollPos;\n\t\t\t\tif (deltaScroll !== 0) {\n\t\t\t\t\t// scroll position changed?\n\t\t\t\t\t_scrollDirection = deltaScroll > 0 ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_REVERSE;\n\t\t\t\t}\n\t\t\t\t// reverse order of scenes if scrolling reverse\n\t\t\t\tif (_scrollDirection === SCROLL_DIRECTION_REVERSE) {\n\t\t\t\t\tscenesToUpdate.reverse();\n\t\t\t\t}\n\t\t\t\t// update scenes\n\t\t\t\tscenesToUpdate.forEach(function (scene, index) {\n\t\t\t\t\tlog(3, \"updating Scene \" + (index + 1) + \"/\" + scenesToUpdate.length + \" (\" + _sceneObjects.length + \" total)\");\n\t\t\t\t\tscene.update(true);\n\t\t\t\t});\n\t\t\t\tif (scenesToUpdate.length === 0 && _options.loglevel >= 3) {\n\t\t\t\t\tlog(3, \"updating 0 Scenes (nothing added to controller)\");\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * Initializes rAF callback\r\n   * @private\r\n   */\n\t\tvar debounceUpdate = function debounceUpdate() {\n\t\t\t_updateTimeout = _util.rAF(updateScenes);\n\t\t};\n\n\t\t/**\r\n   * Handles Container changes\r\n   * @private\r\n   */\n\t\tvar onChange = function onChange(e) {\n\t\t\tlog(3, \"event fired causing an update:\", e.type);\n\t\t\tif (e.type == \"resize\") {\n\t\t\t\t// resize\n\t\t\t\t_viewPortSize = getViewportSize();\n\t\t\t\t_scrollDirection = SCROLL_DIRECTION_PAUSED;\n\t\t\t}\n\t\t\t// schedule update\n\t\t\tif (_updateScenesOnNextCycle !== true) {\n\t\t\t\t_updateScenesOnNextCycle = true;\n\t\t\t\tdebounceUpdate();\n\t\t\t}\n\t\t};\n\n\t\tvar refresh = function refresh() {\n\t\t\tif (!_isDocument) {\n\t\t\t\t// simulate resize event. Only works for viewport relevant param (performance)\n\t\t\t\tif (_viewPortSize != getViewportSize()) {\n\t\t\t\t\tvar resizeEvent;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresizeEvent = new Event('resize', {\n\t\t\t\t\t\t\tbubbles: false,\n\t\t\t\t\t\t\tcancelable: false\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// stupid IE\n\t\t\t\t\t\tresizeEvent = document.createEvent(\"Event\");\n\t\t\t\t\t\tresizeEvent.initEvent(\"resize\", false, false);\n\t\t\t\t\t}\n\t\t\t\t\t_options.container.dispatchEvent(resizeEvent);\n\t\t\t\t}\n\t\t\t}\n\t\t\t_sceneObjects.forEach(function (scene, index) {\n\t\t\t\t// refresh all scenes\n\t\t\t\tscene.refresh();\n\t\t\t});\n\t\t\tscheduleRefresh();\n\t\t};\n\n\t\t/**\r\n   * Send a debug message to the console.\r\n   * provided publicly with _log for plugins\r\n   * @private\r\n   *\r\n   * @param {number} loglevel - The loglevel required to initiate output for the message.\r\n   * @param {...mixed} output - One or more variables that should be passed to the console.\r\n   */\n\t\tvar log = this._log = function (loglevel, output) {\n\t\t\tif (_options.loglevel >= loglevel) {\n\t\t\t\tArray.prototype.splice.call(arguments, 1, 0, \"(\" + NAMESPACE + \") ->\");\n\t\t\t\t_util.log.apply(window, arguments);\n\t\t\t}\n\t\t};\n\t\t// for scenes we have getters for each option, but for the controller we don't, so we need to make it available externally for plugins\n\t\tthis._options = _options;\n\n\t\t/**\r\n   * Sort scenes in ascending order of their start offset.\r\n   * @private\r\n   *\r\n   * @param {array} ScenesArray - an array of ScrollMagic Scenes that should be sorted\r\n   * @return {array} The sorted array of Scenes.\r\n   */\n\t\tvar sortScenes = function sortScenes(ScenesArray) {\n\t\t\tif (ScenesArray.length <= 1) {\n\t\t\t\treturn ScenesArray;\n\t\t\t} else {\n\t\t\t\tvar scenes = ScenesArray.slice(0);\n\t\t\t\tscenes.sort(function (a, b) {\n\t\t\t\t\treturn a.scrollOffset() > b.scrollOffset() ? 1 : -1;\n\t\t\t\t});\n\t\t\t\treturn scenes;\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * ----------------------------------------------------------------\r\n   * public functions\r\n   * ----------------------------------------------------------------\r\n   */\n\n\t\t/**\r\n   * Add one ore more scene(s) to the controller.  \r\n   * This is the equivalent to `Scene.addTo(controller)`.\r\n   * @public\r\n   * @example\r\n   * // with a previously defined scene\r\n   * controller.addScene(scene);\r\n   *\r\n   * // with a newly created scene.\r\n   * controller.addScene(new ScrollMagic.Scene({duration : 0}));\r\n   *\r\n   * // adding multiple scenes\r\n   * controller.addScene([scene, scene2, new ScrollMagic.Scene({duration : 0})]);\r\n   *\r\n   * @param {(ScrollMagic.Scene|array)} newScene - ScrollMagic Scene or Array of Scenes to be added to the controller.\r\n   * @return {Controller} Parent object for chaining.\r\n   */\n\t\tthis.addScene = function (newScene) {\n\t\t\tif (_util.type.Array(newScene)) {\n\t\t\t\tnewScene.forEach(function (scene, index) {\n\t\t\t\t\tController.addScene(scene);\n\t\t\t\t});\n\t\t\t} else if (newScene instanceof ScrollMagic.Scene) {\n\t\t\t\tif (newScene.controller() !== Controller) {\n\t\t\t\t\tnewScene.addTo(Controller);\n\t\t\t\t} else if (_sceneObjects.indexOf(newScene) < 0) {\n\t\t\t\t\t// new scene\n\t\t\t\t\t_sceneObjects.push(newScene); // add to array\n\t\t\t\t\t_sceneObjects = sortScenes(_sceneObjects); // sort\n\t\t\t\t\tnewScene.on(\"shift.controller_sort\", function () {\n\t\t\t\t\t\t// resort whenever scene moves\n\t\t\t\t\t\t_sceneObjects = sortScenes(_sceneObjects);\n\t\t\t\t\t});\n\t\t\t\t\t// insert Global defaults.\n\t\t\t\t\tfor (var key in _options.globalSceneOptions) {\n\t\t\t\t\t\tif (newScene[key]) {\n\t\t\t\t\t\t\tnewScene[key].call(newScene, _options.globalSceneOptions[key]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlog(3, \"adding Scene (now \" + _sceneObjects.length + \" total)\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog(1, \"ERROR: invalid argument supplied for '.addScene()'\");\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\r\n   * Remove one ore more scene(s) from the controller.  \r\n   * This is the equivalent to `Scene.remove()`.\r\n   * @public\r\n   * @example\r\n   * // remove a scene from the controller\r\n   * controller.removeScene(scene);\r\n   *\r\n   * // remove multiple scenes from the controller\r\n   * controller.removeScene([scene, scene2, scene3]);\r\n   *\r\n   * @param {(ScrollMagic.Scene|array)} Scene - ScrollMagic Scene or Array of Scenes to be removed from the controller.\r\n   * @returns {Controller} Parent object for chaining.\r\n   */\n\t\tthis.removeScene = function (Scene) {\n\t\t\tif (_util.type.Array(Scene)) {\n\t\t\t\tScene.forEach(function (scene, index) {\n\t\t\t\t\tController.removeScene(scene);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvar index = _sceneObjects.indexOf(Scene);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tScene.off(\"shift.controller_sort\");\n\t\t\t\t\t_sceneObjects.splice(index, 1);\n\t\t\t\t\tlog(3, \"removing Scene (now \" + _sceneObjects.length + \" left)\");\n\t\t\t\t\tScene.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\r\n  * Update one ore more scene(s) according to the scroll position of the container.  \r\n  * This is the equivalent to `Scene.update()`.  \r\n  * The update method calculates the scene's start and end position (based on the trigger element, trigger hook, duration and offset) and checks it against the current scroll position of the container.  \r\n  * It then updates the current scene state accordingly (or does nothing, if the state is already correct) – Pins will be set to their correct position and tweens will be updated to their correct progress.  \r\n  * _**Note:** This method gets called constantly whenever Controller detects a change. The only application for you is if you change something outside of the realm of ScrollMagic, like moving the trigger or changing tween parameters._\r\n  * @public\r\n  * @example\r\n  * // update a specific scene on next cycle\r\n   * controller.updateScene(scene);\r\n   *\r\n  * // update a specific scene immediately\r\n  * controller.updateScene(scene, true);\r\n   *\r\n  * // update multiple scenes scene on next cycle\r\n  * controller.updateScene([scene1, scene2, scene3]);\r\n  *\r\n  * @param {ScrollMagic.Scene} Scene - ScrollMagic Scene or Array of Scenes that is/are supposed to be updated.\r\n  * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle.  \r\n  \t\t\t\t\t\t\t\t\t\t  This is useful when changing multiple properties of the scene - this way it will only be updated once all new properties are set (updateScenes).\r\n  * @return {Controller} Parent object for chaining.\r\n  */\n\t\tthis.updateScene = function (Scene, immediately) {\n\t\t\tif (_util.type.Array(Scene)) {\n\t\t\t\tScene.forEach(function (scene, index) {\n\t\t\t\t\tController.updateScene(scene, immediately);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (immediately) {\n\t\t\t\t\tScene.update(true);\n\t\t\t\t} else if (_updateScenesOnNextCycle !== true && Scene instanceof ScrollMagic.Scene) {\n\t\t\t\t\t// if _updateScenesOnNextCycle is true, all connected scenes are already scheduled for update\n\t\t\t\t\t// prep array for next update cycle\n\t\t\t\t\t_updateScenesOnNextCycle = _updateScenesOnNextCycle || [];\n\t\t\t\t\tif (_updateScenesOnNextCycle.indexOf(Scene) == -1) {\n\t\t\t\t\t\t_updateScenesOnNextCycle.push(Scene);\n\t\t\t\t\t}\n\t\t\t\t\t_updateScenesOnNextCycle = sortScenes(_updateScenesOnNextCycle); // sort\n\t\t\t\t\tdebounceUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\r\n   * Updates the controller params and calls updateScene on every scene, that is attached to the controller.  \r\n   * See `Controller.updateScene()` for more information about what this means.  \r\n   * In most cases you will not need this function, as it is called constantly, whenever ScrollMagic detects a state change event, like resize or scroll.  \r\n   * The only application for this method is when ScrollMagic fails to detect these events.  \r\n   * One application is with some external scroll libraries (like iScroll) that move an internal container to a negative offset instead of actually scrolling. In this case the update on the controller needs to be called whenever the child container's position changes.\r\n   * For this case there will also be the need to provide a custom function to calculate the correct scroll position. See `Controller.scrollPos()` for details.\r\n   * @public\r\n   * @example\r\n   * // update the controller on next cycle (saves performance due to elimination of redundant updates)\r\n   * controller.update();\r\n   *\r\n   * // update the controller immediately\r\n   * controller.update(true);\r\n   *\r\n   * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle (better performance)\r\n   * @return {Controller} Parent object for chaining.\r\n   */\n\t\tthis.update = function (immediately) {\n\t\t\tonChange({\n\t\t\t\ttype: \"resize\"\n\t\t\t}); // will update size and set _updateScenesOnNextCycle to true\n\t\t\tif (immediately) {\n\t\t\t\tupdateScenes();\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\r\n   * Scroll to a numeric scroll offset, a DOM element, the start of a scene or provide an alternate method for scrolling.  \r\n   * For vertical controllers it will change the top scroll offset and for horizontal applications it will change the left offset.\r\n   * @public\r\n   *\r\n   * @since 1.1.0\r\n   * @example\r\n   * // scroll to an offset of 100\r\n   * controller.scrollTo(100);\r\n   *\r\n   * // scroll to a DOM element\r\n   * controller.scrollTo(\"#anchor\");\r\n   *\r\n   * // scroll to the beginning of a scene\r\n   * var scene = new ScrollMagic.Scene({offset: 200});\r\n   * controller.scrollTo(scene);\r\n   *\r\n   * // define a new scroll position modification function (jQuery animate instead of jump)\r\n   * controller.scrollTo(function (newScrollPos) {\r\n   *\t$(\"html, body\").animate({scrollTop: newScrollPos});\r\n   * });\r\n   * controller.scrollTo(100); // call as usual, but the new function will be used instead\r\n   *\r\n   * // define a new scroll function with an additional parameter\r\n   * controller.scrollTo(function (newScrollPos, message) {\r\n   *  console.log(message);\r\n   *\t$(this).animate({scrollTop: newScrollPos});\r\n   * });\r\n   * // call as usual, but supply an extra parameter to the defined custom function\r\n   * controller.scrollTo(100, \"my message\");\r\n   *\r\n   * // define a new scroll function with an additional parameter containing multiple variables\r\n   * controller.scrollTo(function (newScrollPos, options) {\r\n   *  someGlobalVar = options.a + options.b;\r\n   *\t$(this).animate({scrollTop: newScrollPos});\r\n   * });\r\n   * // call as usual, but supply an extra parameter containing multiple options\r\n   * controller.scrollTo(100, {a: 1, b: 2});\r\n   *\r\n   * // define a new scroll function with a callback supplied as an additional parameter\r\n   * controller.scrollTo(function (newScrollPos, callback) {\r\n   *\t$(this).animate({scrollTop: newScrollPos}, 400, \"swing\", callback);\r\n   * });\r\n   * // call as usual, but supply an extra parameter, which is used as a callback in the previously defined custom scroll function\r\n   * controller.scrollTo(100, function() {\r\n   *\tconsole.log(\"scroll has finished.\");\r\n   * });\r\n   *\r\n   * @param {mixed} scrollTarget - The supplied argument can be one of these types:\r\n   * 1. `number` -> The container will scroll to this new scroll offset.\r\n   * 2. `string` or `object` -> Can be a selector or a DOM object.  \r\n   *  The container will scroll to the position of this element.\r\n   * 3. `ScrollMagic Scene` -> The container will scroll to the start of this scene.\r\n   * 4. `function` -> This function will be used for future scroll position modifications.  \r\n   *  This provides a way for you to change the behaviour of scrolling and adding new behaviour like animation. The function receives the new scroll position as a parameter and a reference to the container element using `this`.  \r\n   *  It may also optionally receive an optional additional parameter (see below)  \r\n   *  _**NOTE:**  \r\n   *  All other options will still work as expected, using the new function to scroll._\r\n   * @param {mixed} [additionalParameter] - If a custom scroll function was defined (see above 4.), you may want to supply additional parameters to it, when calling it. You can do this using this parameter – see examples for details. Please note, that this parameter will have no effect, if you use the default scrolling function.\r\n   * @returns {Controller} Parent object for chaining.\r\n   */\n\t\tthis.scrollTo = function (scrollTarget, additionalParameter) {\n\t\t\tif (_util.type.Number(scrollTarget)) {\n\t\t\t\t// excecute\n\t\t\t\tsetScrollPos.call(_options.container, scrollTarget, additionalParameter);\n\t\t\t} else if (scrollTarget instanceof ScrollMagic.Scene) {\n\t\t\t\t// scroll to scene\n\t\t\t\tif (scrollTarget.controller() === Controller) {\n\t\t\t\t\t// check if the controller is associated with this scene\n\t\t\t\t\tController.scrollTo(scrollTarget.scrollOffset(), additionalParameter);\n\t\t\t\t} else {\n\t\t\t\t\tlog(2, \"scrollTo(): The supplied scene does not belong to this controller. Scroll cancelled.\", scrollTarget);\n\t\t\t\t}\n\t\t\t} else if (_util.type.Function(scrollTarget)) {\n\t\t\t\t// assign new scroll function\n\t\t\t\tsetScrollPos = scrollTarget;\n\t\t\t} else {\n\t\t\t\t// scroll to element\n\t\t\t\tvar elem = _util.get.elements(scrollTarget)[0];\n\t\t\t\tif (elem) {\n\t\t\t\t\t// if parent is pin spacer, use spacer position instead so correct start position is returned for pinned elements.\n\t\t\t\t\twhile (elem.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {\n\t\t\t\t\t\telem = elem.parentNode;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar param = _options.vertical ? \"top\" : \"left\",\n\t\t\t\t\t    // which param is of interest ?\n\t\t\t\t\tcontainerOffset = _util.get.offset(_options.container),\n\t\t\t\t\t    // container position is needed because element offset is returned in relation to document, not in relation to container.\n\t\t\t\t\telementOffset = _util.get.offset(elem);\n\n\t\t\t\t\tif (!_isDocument) {\n\t\t\t\t\t\t// container is not the document root, so substract scroll Position to get correct trigger element position relative to scrollcontent\n\t\t\t\t\t\tcontainerOffset[param] -= Controller.scrollPos();\n\t\t\t\t\t}\n\n\t\t\t\t\tController.scrollTo(elementOffset[param] - containerOffset[param], additionalParameter);\n\t\t\t\t} else {\n\t\t\t\t\tlog(2, \"scrollTo(): The supplied argument is invalid. Scroll cancelled.\", scrollTarget);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\r\n   * **Get** the current scrollPosition or **Set** a new method to calculate it.  \r\n   * -> **GET**:\r\n   * When used as a getter this function will return the current scroll position.  \r\n   * To get a cached value use Controller.info(\"scrollPos\"), which will be updated in the update cycle.  \r\n   * For vertical controllers it will return the top scroll offset and for horizontal applications it will return the left offset.\r\n   *\r\n   * -> **SET**:\r\n   * When used as a setter this method prodes a way to permanently overwrite the controller's scroll position calculation.  \r\n   * A typical usecase is when the scroll position is not reflected by the containers scrollTop or scrollLeft values, but for example by the inner offset of a child container.  \r\n   * Moving a child container inside a parent is a commonly used method for several scrolling frameworks, including iScroll.  \r\n   * By providing an alternate calculation function you can make sure ScrollMagic receives the correct scroll position.  \r\n   * Please also bear in mind that your function should return y values for vertical scrolls an x for horizontals.\r\n   *\r\n   * To change the current scroll position please use `Controller.scrollTo()`.\r\n   * @public\r\n   *\r\n   * @example\r\n   * // get the current scroll Position\r\n   * var scrollPos = controller.scrollPos();\r\n   *\r\n   * // set a new scroll position calculation method\r\n   * controller.scrollPos(function () {\r\n   *\treturn this.info(\"vertical\") ? -mychildcontainer.y : -mychildcontainer.x\r\n   * });\r\n   *\r\n   * @param {function} [scrollPosMethod] - The function to be used for the scroll position calculation of the container.\r\n   * @returns {(number|Controller)} Current scroll position or parent object for chaining.\r\n   */\n\t\tthis.scrollPos = function (scrollPosMethod) {\n\t\t\tif (!arguments.length) {\n\t\t\t\t// get\n\t\t\t\treturn getScrollPos.call(Controller);\n\t\t\t} else {\n\t\t\t\t// set\n\t\t\t\tif (_util.type.Function(scrollPosMethod)) {\n\t\t\t\t\tgetScrollPos = scrollPosMethod;\n\t\t\t\t} else {\n\t\t\t\t\tlog(2, \"Provided value for method 'scrollPos' is not a function. To change the current scroll position use 'scrollTo()'.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\r\n   * **Get** all infos or one in particular about the controller.\r\n   * @public\r\n   * @example\r\n   * // returns the current scroll position (number)\r\n   * var scrollPos = controller.info(\"scrollPos\");\r\n   *\r\n   * // returns all infos as an object\r\n   * var infos = controller.info();\r\n   *\r\n   * @param {string} [about] - If passed only this info will be returned instead of an object containing all.  \r\n   \t\t\t\t\t\t\t Valid options are:\r\n   \t\t\t\t\t\t\t ** `\"size\"` => the current viewport size of the container\r\n   \t\t\t\t\t\t\t ** `\"vertical\"` => true if vertical scrolling, otherwise false\r\n   \t\t\t\t\t\t\t ** `\"scrollPos\"` => the current scroll position\r\n   \t\t\t\t\t\t\t ** `\"scrollDirection\"` => the last known direction of the scroll\r\n   \t\t\t\t\t\t\t ** `\"container\"` => the container element\r\n   \t\t\t\t\t\t\t ** `\"isDocument\"` => true if container element is the document.\r\n   * @returns {(mixed|object)} The requested info(s).\r\n   */\n\t\tthis.info = function (about) {\n\t\t\tvar values = {\n\t\t\t\tsize: _viewPortSize, // contains height or width (in regard to orientation);\n\t\t\t\tvertical: _options.vertical,\n\t\t\t\tscrollPos: _scrollPos,\n\t\t\t\tscrollDirection: _scrollDirection,\n\t\t\t\tcontainer: _options.container,\n\t\t\t\tisDocument: _isDocument\n\t\t\t};\n\t\t\tif (!arguments.length) {\n\t\t\t\t// get all as an object\n\t\t\t\treturn values;\n\t\t\t} else if (values[about] !== undefined) {\n\t\t\t\treturn values[about];\n\t\t\t} else {\n\t\t\t\tlog(1, \"ERROR: option \\\"\" + about + \"\\\" is not available\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * **Get** or **Set** the current loglevel option value.\r\n   * @public\r\n   *\r\n   * @example\r\n   * // get the current value\r\n   * var loglevel = controller.loglevel();\r\n   *\r\n   * // set a new value\r\n   * controller.loglevel(3);\r\n   *\r\n   * @param {number} [newLoglevel] - The new loglevel setting of the Controller. `[0-3]`\r\n   * @returns {(number|Controller)} Current loglevel or parent object for chaining.\r\n   */\n\t\tthis.loglevel = function (newLoglevel) {\n\t\t\tif (!arguments.length) {\n\t\t\t\t// get\n\t\t\t\treturn _options.loglevel;\n\t\t\t} else if (_options.loglevel != newLoglevel) {\n\t\t\t\t// set\n\t\t\t\t_options.loglevel = newLoglevel;\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\r\n   * **Get** or **Set** the current enabled state of the controller.  \r\n   * This can be used to disable all Scenes connected to the controller without destroying or removing them.\r\n   * @public\r\n   *\r\n   * @example\r\n   * // get the current value\r\n   * var enabled = controller.enabled();\r\n   *\r\n   * // disable the controller\r\n   * controller.enabled(false);\r\n   *\r\n   * @param {boolean} [newState] - The new enabled state of the controller `true` or `false`.\r\n   * @returns {(boolean|Controller)} Current enabled state or parent object for chaining.\r\n   */\n\t\tthis.enabled = function (newState) {\n\t\t\tif (!arguments.length) {\n\t\t\t\t// get\n\t\t\t\treturn _enabled;\n\t\t\t} else if (_enabled != newState) {\n\t\t\t\t// set\n\t\t\t\t_enabled = !!newState;\n\t\t\t\tController.updateScene(_sceneObjects, true);\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\r\n   * Destroy the Controller, all Scenes and everything.\r\n   * @public\r\n   *\r\n   * @example\r\n   * // without resetting the scenes\r\n   * controller = controller.destroy();\r\n   *\r\n   * // with scene reset\r\n   * controller = controller.destroy(true);\r\n   *\r\n   * @param {boolean} [resetScenes=false] - If `true` the pins and tweens (if existent) of all scenes will be reset.\r\n   * @returns {null} Null to unset handler variables.\r\n   */\n\t\tthis.destroy = function (resetScenes) {\n\t\t\twindow.clearTimeout(_refreshTimeout);\n\t\t\tvar i = _sceneObjects.length;\n\t\t\twhile (i--) {\n\t\t\t\t_sceneObjects[i].destroy(resetScenes);\n\t\t\t}\n\t\t\t_options.container.removeEventListener(\"resize\", onChange);\n\t\t\t_options.container.removeEventListener(\"scroll\", onChange);\n\t\t\t_util.cAF(_updateTimeout);\n\t\t\tlog(3, \"destroyed \" + NAMESPACE + \" (reset: \" + (resetScenes ? \"true\" : \"false\") + \")\");\n\t\t\treturn null;\n\t\t};\n\n\t\t// INIT\n\t\tconstruct();\n\t\treturn Controller;\n\t};\n\n\t// store pagewide controller options\n\tvar CONTROLLER_OPTIONS = {\n\t\tdefaults: {\n\t\t\tcontainer: window,\n\t\t\tvertical: true,\n\t\t\tglobalSceneOptions: {},\n\t\t\tloglevel: 2,\n\t\t\trefreshInterval: 100\n\t\t}\n\t};\n\t/*\r\n  * method used to add an option to ScrollMagic Scenes.\r\n  */\n\tScrollMagic.Controller.addOption = function (name, defaultValue) {\n\t\tCONTROLLER_OPTIONS.defaults[name] = defaultValue;\n\t};\n\t// instance extension function for plugins\n\tScrollMagic.Controller.extend = function (extension) {\n\t\tvar oldClass = this;\n\t\tScrollMagic.Controller = function () {\n\t\t\toldClass.apply(this, arguments);\n\t\t\tthis.$super = _util.extend({}, this); // copy parent state\n\t\t\treturn extension.apply(this, arguments) || this;\n\t\t};\n\t\t_util.extend(ScrollMagic.Controller, oldClass); // copy properties\n\t\tScrollMagic.Controller.prototype = oldClass.prototype; // copy prototype\n\t\tScrollMagic.Controller.prototype.constructor = ScrollMagic.Controller; // restore constructor\n\t};\n\n\t/**\r\n  * A Scene defines where the controller should react and how.\r\n  *\r\n  * @class\r\n  *\r\n  * @example\r\n  * // create a standard scene and add it to a controller\r\n  * new ScrollMagic.Scene()\r\n  *\t\t.addTo(controller);\r\n  *\r\n  * // create a scene with custom options and assign a handler to it.\r\n  * var scene = new ScrollMagic.Scene({\r\n  * \t\tduration: 100,\r\n  *\t\toffset: 200,\r\n  *\t\ttriggerHook: \"onEnter\",\r\n  *\t\treverse: false\r\n  * });\r\n  *\r\n  * @param {object} [options] - Options for the Scene. The options can be updated at any time.  \r\n  \t\t\t\t\t\t\t   Instead of setting the options for each scene individually you can also set them globally in the controller as the controllers `globalSceneOptions` option. The object accepts the same properties as the ones below.  \r\n  \t\t\t\t\t\t\t   When a scene is added to the controller the options defined using the Scene constructor will be overwritten by those set in `globalSceneOptions`.\r\n  * @param {(number|string|function)} [options.duration=0] - The duration of the scene. \r\n  \t\t\t\t\tPlease see `Scene.duration()` for details.\r\n  * @param {number} [options.offset=0] - Offset Value for the Trigger Position. If no triggerElement is defined this will be the scroll distance from the start of the page, after which the scene will start.\r\n  * @param {(string|object)} [options.triggerElement=null] - Selector or DOM object that defines the start of the scene. If undefined the scene will start right at the start of the page (unless an offset is set).\r\n  * @param {(number|string)} [options.triggerHook=\"onCenter\"] - Can be a number between 0 and 1 defining the position of the trigger Hook in relation to the viewport.  \r\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Can also be defined using a string:\r\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ** `\"onEnter\"` => `1`\r\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ** `\"onCenter\"` => `0.5`\r\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ** `\"onLeave\"` => `0`\r\n  * @param {boolean} [options.reverse=true] - Should the scene reverse, when scrolling up?\r\n  * @param {number} [options.loglevel=2] - Loglevel for debugging. Note that logging is disabled in the minified version of ScrollMagic.\r\n  \t\t\t\t\t\t\t\t\t\t  ** `0` => silent\r\n  \t\t\t\t\t\t\t\t\t\t  ** `1` => errors\r\n  \t\t\t\t\t\t\t\t\t\t  ** `2` => errors, warnings\r\n  \t\t\t\t\t\t\t\t\t\t  ** `3` => errors, warnings, debuginfo\r\n  * \r\n  */\n\tScrollMagic.Scene = function (options) {\n\n\t\t/*\r\n   * ----------------------------------------------------------------\r\n   * settings\r\n   * ----------------------------------------------------------------\r\n   */\n\n\t\tvar NAMESPACE = 'ScrollMagic.Scene',\n\t\t    SCENE_STATE_BEFORE = 'BEFORE',\n\t\t    SCENE_STATE_DURING = 'DURING',\n\t\t    SCENE_STATE_AFTER = 'AFTER',\n\t\t    DEFAULT_OPTIONS = SCENE_OPTIONS.defaults;\n\n\t\t/*\r\n   * ----------------------------------------------------------------\r\n   * private vars\r\n   * ----------------------------------------------------------------\r\n   */\n\n\t\tvar Scene = this,\n\t\t    _options = _util.extend({}, DEFAULT_OPTIONS, options),\n\t\t    _state = SCENE_STATE_BEFORE,\n\t\t    _progress = 0,\n\t\t    _scrollOffset = {\n\t\t\tstart: 0,\n\t\t\tend: 0\n\t\t},\n\t\t    // reflects the controllers's scroll position for the start and end of the scene respectively\n\t\t_triggerPos = 0,\n\t\t    _enabled = true,\n\t\t    _durationUpdateMethod,\n\t\t    _controller;\n\n\t\t/**\r\n   * Internal constructor function of the ScrollMagic Scene\r\n   * @private\r\n   */\n\t\tvar construct = function construct() {\n\t\t\tfor (var key in _options) {\n\t\t\t\t// check supplied options\n\t\t\t\tif (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n\t\t\t\t\tlog(2, \"WARNING: Unknown option \\\"\" + key + \"\\\"\");\n\t\t\t\t\tdelete _options[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add getters/setters for all possible options\n\t\t\tfor (var optionName in DEFAULT_OPTIONS) {\n\t\t\t\taddSceneOption(optionName);\n\t\t\t}\n\t\t\t// validate all options\n\t\t\tvalidateOption();\n\t\t};\n\n\t\t/*\r\n   * ----------------------------------------------------------------\r\n   * Event Management\r\n   * ----------------------------------------------------------------\r\n   */\n\n\t\tvar _listeners = {};\n\t\t/**\r\n   * Scene start event.  \r\n   * Fires whenever the scroll position its the starting point of the scene.  \r\n   * It will also fire when scrolling back up going over the start position of the scene. If you want something to happen only when scrolling down/right, use the scrollDirection parameter passed to the callback.\r\n   *\r\n   * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.\r\n   *\r\n   * @event ScrollMagic.Scene#start\r\n   *\r\n   * @example\r\n   * scene.on(\"start\", function (event) {\r\n   * \tconsole.log(\"Hit start point of scene.\");\r\n   * });\r\n   *\r\n   * @property {object} event - The event Object passed to each callback\r\n   * @property {string} event.type - The name of the event\r\n   * @property {Scene} event.target - The Scene object that triggered this event\r\n   * @property {number} event.progress - Reflects the current progress of the scene\r\n   * @property {string} event.state - The current state of the scene `\"BEFORE\"` or `\"DURING\"`\r\n   * @property {string} event.scrollDirection - Indicates which way we are scrolling `\"PAUSED\"`, `\"FORWARD\"` or `\"REVERSE\"`\r\n   */\n\t\t/**\r\n   * Scene end event.  \r\n   * Fires whenever the scroll position its the ending point of the scene.  \r\n   * It will also fire when scrolling back up from after the scene and going over its end position. If you want something to happen only when scrolling down/right, use the scrollDirection parameter passed to the callback.\r\n   *\r\n   * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.\r\n   *\r\n   * @event ScrollMagic.Scene#end\r\n   *\r\n   * @example\r\n   * scene.on(\"end\", function (event) {\r\n   * \tconsole.log(\"Hit end point of scene.\");\r\n   * });\r\n   *\r\n   * @property {object} event - The event Object passed to each callback\r\n   * @property {string} event.type - The name of the event\r\n   * @property {Scene} event.target - The Scene object that triggered this event\r\n   * @property {number} event.progress - Reflects the current progress of the scene\r\n   * @property {string} event.state - The current state of the scene `\"DURING\"` or `\"AFTER\"`\r\n   * @property {string} event.scrollDirection - Indicates which way we are scrolling `\"PAUSED\"`, `\"FORWARD\"` or `\"REVERSE\"`\r\n   */\n\t\t/**\r\n   * Scene enter event.  \r\n   * Fires whenever the scene enters the \"DURING\" state.  \r\n   * Keep in mind that it doesn't matter if the scene plays forward or backward: This event always fires when the scene enters its active scroll timeframe, regardless of the scroll-direction.\r\n   *\r\n   * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.\r\n   *\r\n   * @event ScrollMagic.Scene#enter\r\n   *\r\n   * @example\r\n   * scene.on(\"enter\", function (event) {\r\n   * \tconsole.log(\"Scene entered.\");\r\n   * });\r\n   *\r\n   * @property {object} event - The event Object passed to each callback\r\n   * @property {string} event.type - The name of the event\r\n   * @property {Scene} event.target - The Scene object that triggered this event\r\n   * @property {number} event.progress - Reflects the current progress of the scene\r\n   * @property {string} event.state - The current state of the scene - always `\"DURING\"`\r\n   * @property {string} event.scrollDirection - Indicates which way we are scrolling `\"PAUSED\"`, `\"FORWARD\"` or `\"REVERSE\"`\r\n   */\n\t\t/**\r\n   * Scene leave event.  \r\n   * Fires whenever the scene's state goes from \"DURING\" to either \"BEFORE\" or \"AFTER\".  \r\n   * Keep in mind that it doesn't matter if the scene plays forward or backward: This event always fires when the scene leaves its active scroll timeframe, regardless of the scroll-direction.\r\n   *\r\n   * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.\r\n   *\r\n   * @event ScrollMagic.Scene#leave\r\n   *\r\n   * @example\r\n   * scene.on(\"leave\", function (event) {\r\n   * \tconsole.log(\"Scene left.\");\r\n   * });\r\n   *\r\n   * @property {object} event - The event Object passed to each callback\r\n   * @property {string} event.type - The name of the event\r\n   * @property {Scene} event.target - The Scene object that triggered this event\r\n   * @property {number} event.progress - Reflects the current progress of the scene\r\n   * @property {string} event.state - The current state of the scene `\"BEFORE\"` or `\"AFTER\"`\r\n   * @property {string} event.scrollDirection - Indicates which way we are scrolling `\"PAUSED\"`, `\"FORWARD\"` or `\"REVERSE\"`\r\n   */\n\t\t/**\r\n   * Scene update event.  \r\n   * Fires whenever the scene is updated (but not necessarily changes the progress).\r\n   *\r\n   * @event ScrollMagic.Scene#update\r\n   *\r\n   * @example\r\n   * scene.on(\"update\", function (event) {\r\n   * \tconsole.log(\"Scene updated.\");\r\n   * });\r\n   *\r\n   * @property {object} event - The event Object passed to each callback\r\n   * @property {string} event.type - The name of the event\r\n   * @property {Scene} event.target - The Scene object that triggered this event\r\n   * @property {number} event.startPos - The starting position of the scene (in relation to the conainer)\r\n   * @property {number} event.endPos - The ending position of the scene (in relation to the conainer)\r\n   * @property {number} event.scrollPos - The current scroll position of the container\r\n   */\n\t\t/**\r\n   * Scene progress event.  \r\n   * Fires whenever the progress of the scene changes.\r\n   *\r\n   * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.\r\n   *\r\n   * @event ScrollMagic.Scene#progress\r\n   *\r\n   * @example\r\n   * scene.on(\"progress\", function (event) {\r\n   * \tconsole.log(\"Scene progress changed to \" + event.progress);\r\n   * });\r\n   *\r\n   * @property {object} event - The event Object passed to each callback\r\n   * @property {string} event.type - The name of the event\r\n   * @property {Scene} event.target - The Scene object that triggered this event\r\n   * @property {number} event.progress - Reflects the current progress of the scene\r\n   * @property {string} event.state - The current state of the scene `\"BEFORE\"`, `\"DURING\"` or `\"AFTER\"`\r\n   * @property {string} event.scrollDirection - Indicates which way we are scrolling `\"PAUSED\"`, `\"FORWARD\"` or `\"REVERSE\"`\r\n   */\n\t\t/**\r\n   * Scene change event.  \r\n   * Fires whenvever a property of the scene is changed.\r\n   *\r\n   * @event ScrollMagic.Scene#change\r\n   *\r\n   * @example\r\n   * scene.on(\"change\", function (event) {\r\n   * \tconsole.log(\"Scene Property \\\"\" + event.what + \"\\\" changed to \" + event.newval);\r\n   * });\r\n   *\r\n   * @property {object} event - The event Object passed to each callback\r\n   * @property {string} event.type - The name of the event\r\n   * @property {Scene} event.target - The Scene object that triggered this event\r\n   * @property {string} event.what - Indicates what value has been changed\r\n   * @property {mixed} event.newval - The new value of the changed property\r\n   */\n\t\t/**\r\n   * Scene shift event.  \r\n   * Fires whenvever the start or end **scroll offset** of the scene change.\r\n   * This happens explicitely, when one of these values change: `offset`, `duration` or `triggerHook`.\r\n   * It will fire implicitly when the `triggerElement` changes, if the new element has a different position (most cases).\r\n   * It will also fire implicitly when the size of the container changes and the triggerHook is anything other than `onLeave`.\r\n   *\r\n   * @event ScrollMagic.Scene#shift\r\n   * @since 1.1.0\r\n   *\r\n   * @example\r\n   * scene.on(\"shift\", function (event) {\r\n   * \tconsole.log(\"Scene moved, because the \" + event.reason + \" has changed.)\");\r\n   * });\r\n   *\r\n   * @property {object} event - The event Object passed to each callback\r\n   * @property {string} event.type - The name of the event\r\n   * @property {Scene} event.target - The Scene object that triggered this event\r\n   * @property {string} event.reason - Indicates why the scene has shifted\r\n   */\n\t\t/**\r\n   * Scene destroy event.  \r\n   * Fires whenvever the scene is destroyed.\r\n   * This can be used to tidy up custom behaviour used in events.\r\n   *\r\n   * @event ScrollMagic.Scene#destroy\r\n   * @since 1.1.0\r\n   *\r\n   * @example\r\n   * scene.on(\"enter\", function (event) {\r\n   *        // add custom action\r\n   *        $(\"#my-elem\").left(\"200\");\r\n   *      })\r\n   *      .on(\"destroy\", function (event) {\r\n   *        // reset my element to start position\r\n   *        if (event.reset) {\r\n   *          $(\"#my-elem\").left(\"0\");\r\n   *        }\r\n   *      });\r\n   *\r\n   * @property {object} event - The event Object passed to each callback\r\n   * @property {string} event.type - The name of the event\r\n   * @property {Scene} event.target - The Scene object that triggered this event\r\n   * @property {boolean} event.reset - Indicates if the destroy method was called with reset `true` or `false`.\r\n   */\n\t\t/**\r\n   * Scene add event.  \r\n   * Fires when the scene is added to a controller.\r\n   * This is mostly used by plugins to know that change might be due.\r\n   *\r\n   * @event ScrollMagic.Scene#add\r\n   * @since 2.0.0\r\n   *\r\n   * @example\r\n   * scene.on(\"add\", function (event) {\r\n   * \tconsole.log('Scene was added to a new controller.');\r\n   * });\r\n   *\r\n   * @property {object} event - The event Object passed to each callback\r\n   * @property {string} event.type - The name of the event\r\n   * @property {Scene} event.target - The Scene object that triggered this event\r\n   * @property {boolean} event.controller - The controller object the scene was added to.\r\n   */\n\t\t/**\r\n   * Scene remove event.  \r\n   * Fires when the scene is removed from a controller.\r\n   * This is mostly used by plugins to know that change might be due.\r\n   *\r\n   * @event ScrollMagic.Scene#remove\r\n   * @since 2.0.0\r\n   *\r\n   * @example\r\n   * scene.on(\"remove\", function (event) {\r\n   * \tconsole.log('Scene was removed from its controller.');\r\n   * });\r\n   *\r\n   * @property {object} event - The event Object passed to each callback\r\n   * @property {string} event.type - The name of the event\r\n   * @property {Scene} event.target - The Scene object that triggered this event\r\n   */\n\n\t\t/**\r\n   * Add one ore more event listener.  \r\n   * The callback function will be fired at the respective event, and an object containing relevant data will be passed to the callback.\r\n   * @method ScrollMagic.Scene#on\r\n   *\r\n   * @example\r\n   * function callback (event) {\r\n   * \t\tconsole.log(\"Event fired! (\" + event.type + \")\");\r\n   * }\r\n   * // add listeners\r\n   * scene.on(\"change update progress start end enter leave\", callback);\r\n   *\r\n   * @param {string} names - The name or names of the event the callback should be attached to.\r\n   * @param {function} callback - A function that should be executed, when the event is dispatched. An event object will be passed to the callback.\r\n   * @returns {Scene} Parent object for chaining.\r\n   */\n\t\tthis.on = function (names, callback) {\n\t\t\tif (_util.type.Function(callback)) {\n\t\t\t\tnames = names.trim().split(' ');\n\t\t\t\tnames.forEach(function (fullname) {\n\t\t\t\t\tvar nameparts = fullname.split('.'),\n\t\t\t\t\t    eventname = nameparts[0],\n\t\t\t\t\t    namespace = nameparts[1];\n\t\t\t\t\tif (eventname != \"*\") {\n\t\t\t\t\t\t// disallow wildcards\n\t\t\t\t\t\tif (!_listeners[eventname]) {\n\t\t\t\t\t\t\t_listeners[eventname] = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_listeners[eventname].push({\n\t\t\t\t\t\t\tnamespace: namespace || '',\n\t\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlog(1, \"ERROR when calling '.on()': Supplied callback for '\" + names + \"' is not a valid function!\");\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\r\n   * Remove one or more event listener.\r\n   * @method ScrollMagic.Scene#off\r\n   *\r\n   * @example\r\n   * function callback (event) {\r\n   * \t\tconsole.log(\"Event fired! (\" + event.type + \")\");\r\n   * }\r\n   * // add listeners\r\n   * scene.on(\"change update\", callback);\r\n   * // remove listeners\r\n   * scene.off(\"change update\", callback);\r\n   *\r\n   * @param {string} names - The name or names of the event that should be removed.\r\n   * @param {function} [callback] - A specific callback function that should be removed. If none is passed all callbacks to the event listener will be removed.\r\n   * @returns {Scene} Parent object for chaining.\r\n   */\n\t\tthis.off = function (names, callback) {\n\t\t\tif (!names) {\n\t\t\t\tlog(1, \"ERROR: Invalid event name supplied.\");\n\t\t\t\treturn Scene;\n\t\t\t}\n\t\t\tnames = names.trim().split(' ');\n\t\t\tnames.forEach(function (fullname, key) {\n\t\t\t\tvar nameparts = fullname.split('.'),\n\t\t\t\t    eventname = nameparts[0],\n\t\t\t\t    namespace = nameparts[1] || '',\n\t\t\t\t    removeList = eventname === '*' ? Object.keys(_listeners) : [eventname];\n\t\t\t\tremoveList.forEach(function (remove) {\n\t\t\t\t\tvar list = _listeners[remove] || [],\n\t\t\t\t\t    i = list.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tvar listener = list[i];\n\t\t\t\t\t\tif (listener && (namespace === listener.namespace || namespace === '*') && (!callback || callback == listener.callback)) {\n\t\t\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!list.length) {\n\t\t\t\t\t\tdelete _listeners[remove];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\r\n   * Trigger an event.\r\n   * @method ScrollMagic.Scene#trigger\r\n   *\r\n   * @example\r\n   * this.trigger(\"change\");\r\n   *\r\n   * @param {string} name - The name of the event that should be triggered.\r\n   * @param {object} [vars] - An object containing info that should be passed to the callback.\r\n   * @returns {Scene} Parent object for chaining.\r\n   */\n\t\tthis.trigger = function (name, vars) {\n\t\t\tif (name) {\n\t\t\t\tvar nameparts = name.trim().split('.'),\n\t\t\t\t    eventname = nameparts[0],\n\t\t\t\t    namespace = nameparts[1],\n\t\t\t\t    listeners = _listeners[eventname];\n\t\t\t\tlog(3, 'event fired:', eventname, vars ? \"->\" : '', vars || '');\n\t\t\t\tif (listeners) {\n\t\t\t\t\tlisteners.forEach(function (listener, key) {\n\t\t\t\t\t\tif (!namespace || namespace === listener.namespace) {\n\t\t\t\t\t\t\tlistener.callback.call(Scene, new ScrollMagic.Event(eventname, listener.namespace, Scene, vars));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog(1, \"ERROR: Invalid event name supplied.\");\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t// set event listeners\n\t\tScene.on(\"change.internal\", function (e) {\n\t\t\tif (e.what !== \"loglevel\" && e.what !== \"tweenChanges\") {\n\t\t\t\t// no need for a scene update scene with these options...\n\t\t\t\tif (e.what === \"triggerElement\") {\n\t\t\t\t\tupdateTriggerElementPosition();\n\t\t\t\t} else if (e.what === \"reverse\") {\n\t\t\t\t\t// the only property left that may have an impact on the current scene state. Everything else is handled by the shift event.\n\t\t\t\t\tScene.update();\n\t\t\t\t}\n\t\t\t}\n\t\t}).on(\"shift.internal\", function (e) {\n\t\t\tupdateScrollOffset();\n\t\t\tScene.update(); // update scene to reflect new position\n\t\t});\n\n\t\t/**\r\n   * Send a debug message to the console.\r\n   * @private\r\n   * but provided publicly with _log for plugins\r\n   *\r\n   * @param {number} loglevel - The loglevel required to initiate output for the message.\r\n   * @param {...mixed} output - One or more variables that should be passed to the console.\r\n   */\n\t\tvar log = this._log = function (loglevel, output) {\n\t\t\tif (_options.loglevel >= loglevel) {\n\t\t\t\tArray.prototype.splice.call(arguments, 1, 0, \"(\" + NAMESPACE + \") ->\");\n\t\t\t\t_util.log.apply(window, arguments);\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * Add the scene to a controller.  \r\n   * This is the equivalent to `Controller.addScene(scene)`.\r\n   * @method ScrollMagic.Scene#addTo\r\n   *\r\n   * @example\r\n   * // add a scene to a ScrollMagic Controller\r\n   * scene.addTo(controller);\r\n   *\r\n   * @param {ScrollMagic.Controller} controller - The controller to which the scene should be added.\r\n   * @returns {Scene} Parent object for chaining.\r\n   */\n\t\tthis.addTo = function (controller) {\n\t\t\tif (!(controller instanceof ScrollMagic.Controller)) {\n\t\t\t\tlog(1, \"ERROR: supplied argument of 'addTo()' is not a valid ScrollMagic Controller\");\n\t\t\t} else if (_controller != controller) {\n\t\t\t\t// new controller\n\t\t\t\tif (_controller) {\n\t\t\t\t\t// was associated to a different controller before, so remove it...\n\t\t\t\t\t_controller.removeScene(Scene);\n\t\t\t\t}\n\t\t\t\t_controller = controller;\n\t\t\t\tvalidateOption();\n\t\t\t\tupdateDuration(true);\n\t\t\t\tupdateTriggerElementPosition(true);\n\t\t\t\tupdateScrollOffset();\n\t\t\t\t_controller.info(\"container\").addEventListener('resize', onContainerResize);\n\t\t\t\tcontroller.addScene(Scene);\n\t\t\t\tScene.trigger(\"add\", {\n\t\t\t\t\tcontroller: _controller\n\t\t\t\t});\n\t\t\t\tlog(3, \"added \" + NAMESPACE + \" to controller\");\n\t\t\t\tScene.update();\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\r\n   * **Get** or **Set** the current enabled state of the scene.  \r\n   * This can be used to disable this scene without removing or destroying it.\r\n   * @method ScrollMagic.Scene#enabled\r\n   *\r\n   * @example\r\n   * // get the current value\r\n   * var enabled = scene.enabled();\r\n   *\r\n   * // disable the scene\r\n   * scene.enabled(false);\r\n   *\r\n   * @param {boolean} [newState] - The new enabled state of the scene `true` or `false`.\r\n   * @returns {(boolean|Scene)} Current enabled state or parent object for chaining.\r\n   */\n\t\tthis.enabled = function (newState) {\n\t\t\tif (!arguments.length) {\n\t\t\t\t// get\n\t\t\t\treturn _enabled;\n\t\t\t} else if (_enabled != newState) {\n\t\t\t\t// set\n\t\t\t\t_enabled = !!newState;\n\t\t\t\tScene.update(true);\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\r\n   * Remove the scene from the controller.  \r\n   * This is the equivalent to `Controller.removeScene(scene)`.\r\n   * The scene will not be updated anymore until you readd it to a controller.\r\n   * To remove the pin or the tween you need to call removeTween() or removePin() respectively.\r\n   * @method ScrollMagic.Scene#remove\r\n   * @example\r\n   * // remove the scene from its controller\r\n   * scene.remove();\r\n   *\r\n   * @returns {Scene} Parent object for chaining.\r\n   */\n\t\tthis.remove = function () {\n\t\t\tif (_controller) {\n\t\t\t\t_controller.info(\"container\").removeEventListener('resize', onContainerResize);\n\t\t\t\tvar tmpParent = _controller;\n\t\t\t\t_controller = undefined;\n\t\t\t\ttmpParent.removeScene(Scene);\n\t\t\t\tScene.trigger(\"remove\");\n\t\t\t\tlog(3, \"removed \" + NAMESPACE + \" from controller\");\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\r\n   * Destroy the scene and everything.\r\n   * @method ScrollMagic.Scene#destroy\r\n   * @example\r\n   * // destroy the scene without resetting the pin and tween to their initial positions\r\n   * scene = scene.destroy();\r\n   *\r\n   * // destroy the scene and reset the pin and tween\r\n   * scene = scene.destroy(true);\r\n   *\r\n   * @param {boolean} [reset=false] - If `true` the pin and tween (if existent) will be reset.\r\n   * @returns {null} Null to unset handler variables.\r\n   */\n\t\tthis.destroy = function (reset) {\n\t\t\tScene.trigger(\"destroy\", {\n\t\t\t\treset: reset\n\t\t\t});\n\t\t\tScene.remove();\n\t\t\tScene.off(\"*.*\");\n\t\t\tlog(3, \"destroyed \" + NAMESPACE + \" (reset: \" + (reset ? \"true\" : \"false\") + \")\");\n\t\t\treturn null;\n\t\t};\n\n\t\t/**\r\n   * Updates the Scene to reflect the current state.  \r\n   * This is the equivalent to `Controller.updateScene(scene, immediately)`.  \r\n   * The update method calculates the scene's start and end position (based on the trigger element, trigger hook, duration and offset) and checks it against the current scroll position of the container.  \r\n   * It then updates the current scene state accordingly (or does nothing, if the state is already correct) – Pins will be set to their correct position and tweens will be updated to their correct progress.\r\n   * This means an update doesn't necessarily result in a progress change. The `progress` event will be fired if the progress has indeed changed between this update and the last.  \r\n   * _**NOTE:** This method gets called constantly whenever ScrollMagic detects a change. The only application for you is if you change something outside of the realm of ScrollMagic, like moving the trigger or changing tween parameters._\r\n   * @method ScrollMagic.Scene#update\r\n   * @example\r\n   * // update the scene on next tick\r\n   * scene.update();\r\n   *\r\n   * // update the scene immediately\r\n   * scene.update(true);\r\n   *\r\n   * @fires Scene.update\r\n   *\r\n   * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle (better performance).\r\n   * @returns {Scene} Parent object for chaining.\r\n   */\n\t\tthis.update = function (immediately) {\n\t\t\tif (_controller) {\n\t\t\t\tif (immediately) {\n\t\t\t\t\tif (_controller.enabled() && _enabled) {\n\t\t\t\t\t\tvar scrollPos = _controller.info(\"scrollPos\"),\n\t\t\t\t\t\t    newProgress;\n\n\t\t\t\t\t\tif (_options.duration > 0) {\n\t\t\t\t\t\t\tnewProgress = (scrollPos - _scrollOffset.start) / (_scrollOffset.end - _scrollOffset.start);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewProgress = scrollPos >= _scrollOffset.start ? 1 : 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tScene.trigger(\"update\", {\n\t\t\t\t\t\t\tstartPos: _scrollOffset.start,\n\t\t\t\t\t\t\tendPos: _scrollOffset.end,\n\t\t\t\t\t\t\tscrollPos: scrollPos\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tScene.progress(newProgress);\n\t\t\t\t\t} else if (_pin && _state === SCENE_STATE_DURING) {\n\t\t\t\t\t\tupdatePinState(true); // unpin in position\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_controller.updateScene(Scene, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\r\n   * Updates dynamic scene variables like the trigger element position or the duration.\r\n   * This method is automatically called in regular intervals from the controller. See {@link ScrollMagic.Controller} option `refreshInterval`.\r\n   * \r\n   * You can call it to minimize lag, for example when you intentionally change the position of the triggerElement.\r\n   * If you don't it will simply be updated in the next refresh interval of the container, which is usually sufficient.\r\n   *\r\n   * @method ScrollMagic.Scene#refresh\r\n   * @since 1.1.0\r\n   * @example\r\n   * scene = new ScrollMagic.Scene({triggerElement: \"#trigger\"});\r\n   * \r\n   * // change the position of the trigger\r\n   * $(\"#trigger\").css(\"top\", 500);\r\n   * // immediately let the scene know of this change\r\n   * scene.refresh();\r\n   *\r\n   * @fires {@link Scene.shift}, if the trigger element position or the duration changed\r\n   * @fires {@link Scene.change}, if the duration changed\r\n   *\r\n   * @returns {Scene} Parent object for chaining.\r\n   */\n\t\tthis.refresh = function () {\n\t\t\tupdateDuration();\n\t\t\tupdateTriggerElementPosition();\n\t\t\t// update trigger element position\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\r\n   * **Get** or **Set** the scene's progress.  \r\n   * Usually it shouldn't be necessary to use this as a setter, as it is set automatically by scene.update().  \r\n   * The order in which the events are fired depends on the duration of the scene:\r\n   *  1. Scenes with `duration == 0`:  \r\n   *  Scenes that have no duration by definition have no ending. Thus the `end` event will never be fired.  \r\n   *  When the trigger position of the scene is passed the events are always fired in this order:  \r\n   *  `enter`, `start`, `progress` when scrolling forward  \r\n   *  and  \r\n   *  `progress`, `start`, `leave` when scrolling in reverse\r\n   *  2. Scenes with `duration > 0`:  \r\n   *  Scenes with a set duration have a defined start and end point.  \r\n   *  When scrolling past the start position of the scene it will fire these events in this order:  \r\n   *  `enter`, `start`, `progress`  \r\n   *  When continuing to scroll and passing the end point it will fire these events:  \r\n   *  `progress`, `end`, `leave`  \r\n   *  When reversing through the end point these events are fired:  \r\n   *  `enter`, `end`, `progress`  \r\n   *  And when continuing to scroll past the start position in reverse it will fire:  \r\n   *  `progress`, `start`, `leave`  \r\n   *  In between start and end the `progress` event will be called constantly, whenever the progress changes.\r\n   * \r\n   * In short:  \r\n   * `enter` events will always trigger **before** the progress update and `leave` envents will trigger **after** the progress update.  \r\n   * `start` and `end` will always trigger at their respective position.\r\n   * \r\n   * Please review the event descriptions for details on the events and the event object that is passed to the callback.\r\n   * \r\n   * @method ScrollMagic.Scene#progress\r\n   * @example\r\n   * // get the current scene progress\r\n   * var progress = scene.progress();\r\n   *\r\n   * // set new scene progress\r\n   * scene.progress(0.3);\r\n   *\r\n   * @fires {@link Scene.enter}, when used as setter\r\n   * @fires {@link Scene.start}, when used as setter\r\n   * @fires {@link Scene.progress}, when used as setter\r\n   * @fires {@link Scene.end}, when used as setter\r\n   * @fires {@link Scene.leave}, when used as setter\r\n   *\r\n   * @param {number} [progress] - The new progress value of the scene `[0-1]`.\r\n   * @returns {number} `get` -  Current scene progress.\r\n   * @returns {Scene} `set` -  Parent object for chaining.\r\n   */\n\t\tthis.progress = function (progress) {\n\t\t\tif (!arguments.length) {\n\t\t\t\t// get\n\t\t\t\treturn _progress;\n\t\t\t} else {\n\t\t\t\t// set\n\t\t\t\tvar doUpdate = false,\n\t\t\t\t    oldState = _state,\n\t\t\t\t    scrollDirection = _controller ? _controller.info(\"scrollDirection\") : 'PAUSED',\n\t\t\t\t    reverseOrForward = _options.reverse || progress >= _progress;\n\t\t\t\tif (_options.duration === 0) {\n\t\t\t\t\t// zero duration scenes\n\t\t\t\t\tdoUpdate = _progress != progress;\n\t\t\t\t\t_progress = progress < 1 && reverseOrForward ? 0 : 1;\n\t\t\t\t\t_state = _progress === 0 ? SCENE_STATE_BEFORE : SCENE_STATE_DURING;\n\t\t\t\t} else {\n\t\t\t\t\t// scenes with start and end\n\t\t\t\t\tif (progress < 0 && _state !== SCENE_STATE_BEFORE && reverseOrForward) {\n\t\t\t\t\t\t// go back to initial state\n\t\t\t\t\t\t_progress = 0;\n\t\t\t\t\t\t_state = SCENE_STATE_BEFORE;\n\t\t\t\t\t\tdoUpdate = true;\n\t\t\t\t\t} else if (progress >= 0 && progress < 1 && reverseOrForward) {\n\t\t\t\t\t\t_progress = progress;\n\t\t\t\t\t\t_state = SCENE_STATE_DURING;\n\t\t\t\t\t\tdoUpdate = true;\n\t\t\t\t\t} else if (progress >= 1 && _state !== SCENE_STATE_AFTER) {\n\t\t\t\t\t\t_progress = 1;\n\t\t\t\t\t\t_state = SCENE_STATE_AFTER;\n\t\t\t\t\t\tdoUpdate = true;\n\t\t\t\t\t} else if (_state === SCENE_STATE_DURING && !reverseOrForward) {\n\t\t\t\t\t\tupdatePinState(); // in case we scrolled backwards mid-scene and reverse is disabled => update the pin position, so it doesn't move back as well.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (doUpdate) {\n\t\t\t\t\t// fire events\n\t\t\t\t\tvar eventVars = {\n\t\t\t\t\t\tprogress: _progress,\n\t\t\t\t\t\tstate: _state,\n\t\t\t\t\t\tscrollDirection: scrollDirection\n\t\t\t\t\t},\n\t\t\t\t\t    stateChanged = _state != oldState;\n\n\t\t\t\t\tvar trigger = function trigger(eventName) {\n\t\t\t\t\t\t// tmp helper to simplify code\n\t\t\t\t\t\tScene.trigger(eventName, eventVars);\n\t\t\t\t\t};\n\n\t\t\t\t\tif (stateChanged) {\n\t\t\t\t\t\t// enter events\n\t\t\t\t\t\tif (oldState !== SCENE_STATE_DURING) {\n\t\t\t\t\t\t\ttrigger(\"enter\");\n\t\t\t\t\t\t\ttrigger(oldState === SCENE_STATE_BEFORE ? \"start\" : \"end\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttrigger(\"progress\");\n\t\t\t\t\tif (stateChanged) {\n\t\t\t\t\t\t// leave events\n\t\t\t\t\t\tif (_state !== SCENE_STATE_DURING) {\n\t\t\t\t\t\t\ttrigger(_state === SCENE_STATE_BEFORE ? \"start\" : \"end\");\n\t\t\t\t\t\t\ttrigger(\"leave\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn Scene;\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * Update the start and end scrollOffset of the container.\r\n   * The positions reflect what the controller's scroll position will be at the start and end respectively.\r\n   * Is called, when:\r\n   *   - Scene event \"change\" is called with: offset, triggerHook, duration \r\n   *   - scroll container event \"resize\" is called\r\n   *   - the position of the triggerElement changes\r\n   *   - the controller changes -> addTo()\r\n   * @private\r\n   */\n\t\tvar updateScrollOffset = function updateScrollOffset() {\n\t\t\t_scrollOffset = {\n\t\t\t\tstart: _triggerPos + _options.offset\n\t\t\t};\n\t\t\tif (_controller && _options.triggerElement) {\n\t\t\t\t// take away triggerHook portion to get relative to top\n\t\t\t\t_scrollOffset.start -= _controller.info(\"size\") * _options.triggerHook;\n\t\t\t}\n\t\t\t_scrollOffset.end = _scrollOffset.start + _options.duration;\n\t\t};\n\n\t\t/**\r\n   * Updates the duration if set to a dynamic function.\r\n   * This method is called when the scene is added to a controller and in regular intervals from the controller through scene.refresh().\r\n   * \r\n   * @fires {@link Scene.change}, if the duration changed\r\n   * @fires {@link Scene.shift}, if the duration changed\r\n   *\r\n   * @param {boolean} [suppressEvents=false] - If true the shift event will be suppressed.\r\n   * @private\r\n   */\n\t\tvar updateDuration = function updateDuration(suppressEvents) {\n\t\t\t// update duration\n\t\t\tif (_durationUpdateMethod) {\n\t\t\t\tvar varname = \"duration\";\n\t\t\t\tif (changeOption(varname, _durationUpdateMethod.call(Scene)) && !suppressEvents) {\n\t\t\t\t\t// set\n\t\t\t\t\tScene.trigger(\"change\", {\n\t\t\t\t\t\twhat: varname,\n\t\t\t\t\t\tnewval: _options[varname]\n\t\t\t\t\t});\n\t\t\t\t\tScene.trigger(\"shift\", {\n\t\t\t\t\t\treason: varname\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * Updates the position of the triggerElement, if present.\r\n   * This method is called ...\r\n   *  - ... when the triggerElement is changed\r\n   *  - ... when the scene is added to a (new) controller\r\n   *  - ... in regular intervals from the controller through scene.refresh().\r\n   * \r\n   * @fires {@link Scene.shift}, if the position changed\r\n   *\r\n   * @param {boolean} [suppressEvents=false] - If true the shift event will be suppressed.\r\n   * @private\r\n   */\n\t\tvar updateTriggerElementPosition = function updateTriggerElementPosition(suppressEvents) {\n\t\t\tvar elementPos = 0,\n\t\t\t    telem = _options.triggerElement;\n\t\t\tif (_controller && (telem || _triggerPos > 0)) {\n\t\t\t\t// either an element exists or was removed and the triggerPos is still > 0\n\t\t\t\tif (telem) {\n\t\t\t\t\t// there currently a triggerElement set\n\t\t\t\t\tif (telem.parentNode) {\n\t\t\t\t\t\t// check if element is still attached to DOM\n\t\t\t\t\t\tvar controllerInfo = _controller.info(),\n\t\t\t\t\t\t    containerOffset = _util.get.offset(controllerInfo.container),\n\t\t\t\t\t\t    // container position is needed because element offset is returned in relation to document, not in relation to container.\n\t\t\t\t\t\tparam = controllerInfo.vertical ? \"top\" : \"left\"; // which param is of interest ?\n\n\t\t\t\t\t\t// if parent is spacer, use spacer position instead so correct start position is returned for pinned elements.\n\t\t\t\t\t\twhile (telem.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {\n\t\t\t\t\t\t\ttelem = telem.parentNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar elementOffset = _util.get.offset(telem);\n\n\t\t\t\t\t\tif (!controllerInfo.isDocument) {\n\t\t\t\t\t\t\t// container is not the document root, so substract scroll Position to get correct trigger element position relative to scrollcontent\n\t\t\t\t\t\t\tcontainerOffset[param] -= _controller.scrollPos();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telementPos = elementOffset[param] - containerOffset[param];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// there was an element, but it was removed from DOM\n\t\t\t\t\t\tlog(2, \"WARNING: triggerElement was removed from DOM and will be reset to\", undefined);\n\t\t\t\t\t\tScene.triggerElement(undefined); // unset, so a change event is triggered\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar changed = elementPos != _triggerPos;\n\t\t\t\t_triggerPos = elementPos;\n\t\t\t\tif (changed && !suppressEvents) {\n\t\t\t\t\tScene.trigger(\"shift\", {\n\t\t\t\t\t\treason: \"triggerElementPosition\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * Trigger a shift event, when the container is resized and the triggerHook is > 1.\r\n   * @private\r\n   */\n\t\tvar onContainerResize = function onContainerResize(e) {\n\t\t\tif (_options.triggerHook > 0) {\n\t\t\t\tScene.trigger(\"shift\", {\n\t\t\t\t\treason: \"containerResize\"\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tvar _validate = _util.extend(SCENE_OPTIONS.validate, {\n\t\t\t// validation for duration handled internally for reference to private var _durationMethod\n\t\t\tduration: function duration(val) {\n\t\t\t\tif (_util.type.String(val) && val.match(/^(\\.|\\d)*\\d+%$/)) {\n\t\t\t\t\t// percentage value\n\t\t\t\t\tvar perc = parseFloat(val) / 100;\n\t\t\t\t\tval = function val() {\n\t\t\t\t\t\treturn _controller ? _controller.info(\"size\") * perc : 0;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (_util.type.Function(val)) {\n\t\t\t\t\t// function\n\t\t\t\t\t_durationUpdateMethod = val;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = parseFloat(_durationUpdateMethod.call(Scene));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tval = -1; // will cause error below\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// val has to be float\n\t\t\t\tval = parseFloat(val);\n\t\t\t\tif (!_util.type.Number(val) || val < 0) {\n\t\t\t\t\tif (_durationUpdateMethod) {\n\t\t\t\t\t\t_durationUpdateMethod = undefined;\n\t\t\t\t\t\tthrow [\"Invalid return value of supplied function for option \\\"duration\\\":\", val];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow [\"Invalid value for option \\\"duration\\\":\", val];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t}\n\t\t});\n\n\t\t/**\r\n   * Checks the validity of a specific or all options and reset to default if neccessary.\r\n   * @private\r\n   */\n\t\tvar validateOption = function validateOption(check) {\n\t\t\tcheck = arguments.length ? [check] : Object.keys(_validate);\n\t\t\tcheck.forEach(function (optionName, key) {\n\t\t\t\tvar value;\n\t\t\t\tif (_validate[optionName]) {\n\t\t\t\t\t// there is a validation method for this option\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// validate value\n\t\t\t\t\t\tvalue = _validate[optionName](_options[optionName]);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// validation failed -> reset to default\n\t\t\t\t\t\tvalue = DEFAULT_OPTIONS[optionName];\n\t\t\t\t\t\tvar logMSG = _util.type.String(e) ? [e] : e;\n\t\t\t\t\t\tif (_util.type.Array(logMSG)) {\n\t\t\t\t\t\t\tlogMSG[0] = \"ERROR: \" + logMSG[0];\n\t\t\t\t\t\t\tlogMSG.unshift(1); // loglevel 1 for error msg\n\t\t\t\t\t\t\tlog.apply(this, logMSG);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlog(1, \"ERROR: Problem executing validation callback for option '\" + optionName + \"':\", e.message);\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\t_options[optionName] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t/**\r\n   * Helper used by the setter/getters for scene options\r\n   * @private\r\n   */\n\t\tvar changeOption = function changeOption(varname, newval) {\n\t\t\tvar changed = false,\n\t\t\t    oldval = _options[varname];\n\t\t\tif (_options[varname] != newval) {\n\t\t\t\t_options[varname] = newval;\n\t\t\t\tvalidateOption(varname); // resets to default if necessary\n\t\t\t\tchanged = oldval != _options[varname];\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\t// generate getters/setters for all options\n\t\tvar addSceneOption = function addSceneOption(optionName) {\n\t\t\tif (!Scene[optionName]) {\n\t\t\t\tScene[optionName] = function (newVal) {\n\t\t\t\t\tif (!arguments.length) {\n\t\t\t\t\t\t// get\n\t\t\t\t\t\treturn _options[optionName];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (optionName === \"duration\") {\n\t\t\t\t\t\t\t// new duration is set, so any previously set function must be unset\n\t\t\t\t\t\t\t_durationUpdateMethod = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (changeOption(optionName, newVal)) {\n\t\t\t\t\t\t\t// set\n\t\t\t\t\t\t\tScene.trigger(\"change\", {\n\t\t\t\t\t\t\t\twhat: optionName,\n\t\t\t\t\t\t\t\tnewval: _options[optionName]\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (SCENE_OPTIONS.shifts.indexOf(optionName) > -1) {\n\t\t\t\t\t\t\t\tScene.trigger(\"shift\", {\n\t\t\t\t\t\t\t\t\treason: optionName\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn Scene;\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * **Get** or **Set** the duration option value.\r\n   *\r\n   * As a **setter** it accepts three types of parameters:\r\n   * 1. `number`: Sets the duration of the scene to exactly this amount of pixels.  \r\n   *   This means the scene will last for exactly this amount of pixels scrolled. Sub-Pixels are also valid.\r\n   *   A value of `0` means that the scene is 'open end' and no end will be triggered. Pins will never unpin and animations will play independently of scroll progress.\r\n   * 2. `string`: Always updates the duration relative to parent scroll container.  \r\n   *   For example `\"100%\"` will keep the duration always exactly at the inner height of the scroll container.\r\n   *   When scrolling vertically the width is used for reference respectively.\r\n   * 3. `function`: The supplied function will be called to return the scene duration.\r\n   *   This is useful in setups where the duration depends on other elements who might change size. By supplying a function you can return a value instead of updating potentially multiple scene durations.  \r\n   *   The scene can be referenced inside the callback using `this`.\r\n   *   _**WARNING:** This is an easy way to kill performance, as the callback will be executed every time `Scene.refresh()` is called, which happens a lot. The interval is defined by the controller (see ScrollMagic.Controller option `refreshInterval`).  \r\n   *   It's recomended to avoid calculations within the function and use cached variables as return values.  \r\n   *   This counts double if you use the same function for multiple scenes._\r\n   *\r\n   * @method ScrollMagic.Scene#duration\r\n   * @example\r\n   * // get the current duration value\r\n   * var duration = scene.duration();\r\n   *\r\n   * // set a new duration\r\n   * scene.duration(300);\r\n   *\r\n   * // set duration responsively to container size\r\n   * scene.duration(\"100%\");\r\n   *\r\n   * // use a function to randomize the duration for some reason.\r\n   * var durationValueCache;\r\n   * function durationCallback () {\r\n   *   return durationValueCache;\r\n   * }\r\n   * function updateDuration () {\r\n   *   durationValueCache = Math.random() * 100;\r\n   * }\r\n   * updateDuration(); // set to initial value\r\n   * scene.duration(durationCallback); // set duration callback\r\n   *\r\n   * @fires {@link Scene.change}, when used as setter\r\n   * @fires {@link Scene.shift}, when used as setter\r\n   * @param {(number|string|function)} [newDuration] - The new duration setting for the scene.\r\n   * @returns {number} `get` -  Current scene duration.\r\n   * @returns {Scene} `set` -  Parent object for chaining.\r\n   */\n\n\t\t/**\r\n   * **Get** or **Set** the offset option value.\r\n   * @method ScrollMagic.Scene#offset\r\n   * @example\r\n   * // get the current offset\r\n   * var offset = scene.offset();\r\n   *\r\n   * // set a new offset\r\n   * scene.offset(100);\r\n   *\r\n   * @fires {@link Scene.change}, when used as setter\r\n   * @fires {@link Scene.shift}, when used as setter\r\n   * @param {number} [newOffset] - The new offset of the scene.\r\n   * @returns {number} `get` -  Current scene offset.\r\n   * @returns {Scene} `set` -  Parent object for chaining.\r\n   */\n\n\t\t/**\r\n   * **Get** or **Set** the triggerElement option value.\r\n   * Does **not** fire `Scene.shift`, because changing the trigger Element doesn't necessarily mean the start position changes. This will be determined in `Scene.refresh()`, which is automatically triggered.\r\n   * @method ScrollMagic.Scene#triggerElement\r\n   * @example\r\n   * // get the current triggerElement\r\n   * var triggerElement = scene.triggerElement();\r\n   *\r\n   * // set a new triggerElement using a selector\r\n   * scene.triggerElement(\"#trigger\");\r\n   * // set a new triggerElement using a DOM object\r\n   * scene.triggerElement(document.getElementById(\"trigger\"));\r\n   *\r\n   * @fires {@link Scene.change}, when used as setter\r\n   * @param {(string|object)} [newTriggerElement] - The new trigger element for the scene.\r\n   * @returns {(string|object)} `get` -  Current triggerElement.\r\n   * @returns {Scene} `set` -  Parent object for chaining.\r\n   */\n\n\t\t/**\r\n   * **Get** or **Set** the triggerHook option value.\r\n   * @method ScrollMagic.Scene#triggerHook\r\n   * @example\r\n   * // get the current triggerHook value\r\n   * var triggerHook = scene.triggerHook();\r\n   *\r\n   * // set a new triggerHook using a string\r\n   * scene.triggerHook(\"onLeave\");\r\n   * // set a new triggerHook using a number\r\n   * scene.triggerHook(0.7);\r\n   *\r\n   * @fires {@link Scene.change}, when used as setter\r\n   * @fires {@link Scene.shift}, when used as setter\r\n   * @param {(number|string)} [newTriggerHook] - The new triggerHook of the scene. See {@link Scene} parameter description for value options.\r\n   * @returns {number} `get` -  Current triggerHook (ALWAYS numerical).\r\n   * @returns {Scene} `set` -  Parent object for chaining.\r\n   */\n\n\t\t/**\r\n   * **Get** or **Set** the reverse option value.\r\n   * @method ScrollMagic.Scene#reverse\r\n   * @example\r\n   * // get the current reverse option\r\n   * var reverse = scene.reverse();\r\n   *\r\n   * // set new reverse option\r\n   * scene.reverse(false);\r\n   *\r\n   * @fires {@link Scene.change}, when used as setter\r\n   * @param {boolean} [newReverse] - The new reverse setting of the scene.\r\n   * @returns {boolean} `get` -  Current reverse option value.\r\n   * @returns {Scene} `set` -  Parent object for chaining.\r\n   */\n\n\t\t/**\r\n   * **Get** or **Set** the loglevel option value.\r\n   * @method ScrollMagic.Scene#loglevel\r\n   * @example\r\n   * // get the current loglevel\r\n   * var loglevel = scene.loglevel();\r\n   *\r\n   * // set new loglevel\r\n   * scene.loglevel(3);\r\n   *\r\n   * @fires {@link Scene.change}, when used as setter\r\n   * @param {number} [newLoglevel] - The new loglevel setting of the scene. `[0-3]`\r\n   * @returns {number} `get` -  Current loglevel.\r\n   * @returns {Scene} `set` -  Parent object for chaining.\r\n   */\n\n\t\t/**\r\n   * **Get** the associated controller.\r\n   * @method ScrollMagic.Scene#controller\r\n   * @example\r\n   * // get the controller of a scene\r\n   * var controller = scene.controller();\r\n   *\r\n   * @returns {ScrollMagic.Controller} Parent controller or `undefined`\r\n   */\n\t\tthis.controller = function () {\n\t\t\treturn _controller;\n\t\t};\n\n\t\t/**\r\n   * **Get** the current state.\r\n   * @method ScrollMagic.Scene#state\r\n   * @example\r\n   * // get the current state\r\n   * var state = scene.state();\r\n   *\r\n   * @returns {string} `\"BEFORE\"`, `\"DURING\"` or `\"AFTER\"`\r\n   */\n\t\tthis.state = function () {\n\t\t\treturn _state;\n\t\t};\n\n\t\t/**\r\n   * **Get** the current scroll offset for the start of the scene.  \r\n   * Mind, that the scrollOffset is related to the size of the container, if `triggerHook` is bigger than `0` (or `\"onLeave\"`).  \r\n   * This means, that resizing the container or changing the `triggerHook` will influence the scene's start offset.\r\n   * @method ScrollMagic.Scene#scrollOffset\r\n   * @example\r\n   * // get the current scroll offset for the start and end of the scene.\r\n   * var start = scene.scrollOffset();\r\n   * var end = scene.scrollOffset() + scene.duration();\r\n   * console.log(\"the scene starts at\", start, \"and ends at\", end);\r\n   *\r\n   * @returns {number} The scroll offset (of the container) at which the scene will trigger. Y value for vertical and X value for horizontal scrolls.\r\n   */\n\t\tthis.scrollOffset = function () {\n\t\t\treturn _scrollOffset.start;\n\t\t};\n\n\t\t/**\r\n   * **Get** the trigger position of the scene (including the value of the `offset` option).  \r\n   * @method ScrollMagic.Scene#triggerPosition\r\n   * @example\r\n   * // get the scene's trigger position\r\n   * var triggerPosition = scene.triggerPosition();\r\n   *\r\n   * @returns {number} Start position of the scene. Top position value for vertical and left position value for horizontal scrolls.\r\n   */\n\t\tthis.triggerPosition = function () {\n\t\t\tvar pos = _options.offset; // the offset is the basis\n\t\t\tif (_controller) {\n\t\t\t\t// get the trigger position\n\t\t\t\tif (_options.triggerElement) {\n\t\t\t\t\t// Element as trigger\n\t\t\t\t\tpos += _triggerPos;\n\t\t\t\t} else {\n\t\t\t\t\t// return the height of the triggerHook to start at the beginning\n\t\t\t\t\tpos += _controller.info(\"size\") * Scene.triggerHook();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn pos;\n\t\t};\n\n\t\tvar _pin, _pinOptions;\n\n\t\tScene.on(\"shift.internal\", function (e) {\n\t\t\tvar durationChanged = e.reason === \"duration\";\n\t\t\tif (_state === SCENE_STATE_AFTER && durationChanged || _state === SCENE_STATE_DURING && _options.duration === 0) {\n\t\t\t\t// if [duration changed after a scene (inside scene progress updates pin position)] or [duration is 0, we are in pin phase and some other value changed].\n\t\t\t\tupdatePinState();\n\t\t\t}\n\t\t\tif (durationChanged) {\n\t\t\t\tupdatePinDimensions();\n\t\t\t}\n\t\t}).on(\"progress.internal\", function (e) {\n\t\t\tupdatePinState();\n\t\t}).on(\"add.internal\", function (e) {\n\t\t\tupdatePinDimensions();\n\t\t}).on(\"destroy.internal\", function (e) {\n\t\t\tScene.removePin(e.reset);\n\t\t});\n\t\t/**\r\n   * Update the pin state.\r\n   * @private\r\n   */\n\t\tvar updatePinState = function updatePinState(forceUnpin) {\n\t\t\tif (_pin && _controller) {\n\t\t\t\tvar containerInfo = _controller.info(),\n\t\t\t\t    pinTarget = _pinOptions.spacer.firstChild; // may be pin element or another spacer, if cascading pins\n\n\t\t\t\tif (!forceUnpin && _state === SCENE_STATE_DURING) {\n\t\t\t\t\t// during scene or if duration is 0 and we are past the trigger\n\t\t\t\t\t// pinned state\n\t\t\t\t\tif (_util.css(pinTarget, \"position\") != \"fixed\") {\n\t\t\t\t\t\t// change state before updating pin spacer (position changes due to fixed collapsing might occur.)\n\t\t\t\t\t\t_util.css(pinTarget, {\n\t\t\t\t\t\t\t\"position\": \"fixed\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// update pin spacer\n\t\t\t\t\t\tupdatePinDimensions();\n\t\t\t\t\t}\n\n\t\t\t\t\tvar fixedPos = _util.get.offset(_pinOptions.spacer, true),\n\t\t\t\t\t    // get viewport position of spacer\n\t\t\t\t\tscrollDistance = _options.reverse || _options.duration === 0 ? containerInfo.scrollPos - _scrollOffset.start // quicker\n\t\t\t\t\t: Math.round(_progress * _options.duration * 10) / 10; // if no reverse and during pin the position needs to be recalculated using the progress\n\n\t\t\t\t\t// add scrollDistance\n\t\t\t\t\tfixedPos[containerInfo.vertical ? \"top\" : \"left\"] += scrollDistance;\n\n\t\t\t\t\t// set new values\n\t\t\t\t\t_util.css(_pinOptions.spacer.firstChild, {\n\t\t\t\t\t\ttop: fixedPos.top,\n\t\t\t\t\t\tleft: fixedPos.left\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// unpinned state\n\t\t\t\t\tvar newCSS = {\n\t\t\t\t\t\tposition: _pinOptions.inFlow ? \"relative\" : \"absolute\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0\n\t\t\t\t\t},\n\t\t\t\t\t    change = _util.css(pinTarget, \"position\") != newCSS.position;\n\n\t\t\t\t\tif (!_pinOptions.pushFollowers) {\n\t\t\t\t\t\tnewCSS[containerInfo.vertical ? \"top\" : \"left\"] = _options.duration * _progress;\n\t\t\t\t\t} else if (_options.duration > 0) {\n\t\t\t\t\t\t// only concerns scenes with duration\n\t\t\t\t\t\tif (_state === SCENE_STATE_AFTER && parseFloat(_util.css(_pinOptions.spacer, \"padding-top\")) === 0) {\n\t\t\t\t\t\t\tchange = true; // if in after state but havent updated spacer yet (jumped past pin)\n\t\t\t\t\t\t} else if (_state === SCENE_STATE_BEFORE && parseFloat(_util.css(_pinOptions.spacer, \"padding-bottom\")) === 0) {\n\t\t\t\t\t\t\t// before\n\t\t\t\t\t\t\tchange = true; // jumped past fixed state upward direction\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// set new values\n\t\t\t\t\t_util.css(pinTarget, newCSS);\n\t\t\t\t\tif (change) {\n\t\t\t\t\t\t// update pin spacer if state changed\n\t\t\t\t\t\tupdatePinDimensions();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * Update the pin spacer and/or element size.\r\n   * The size of the spacer needs to be updated whenever the duration of the scene changes, if it is to push down following elements.\r\n   * @private\r\n   */\n\t\tvar updatePinDimensions = function updatePinDimensions() {\n\t\t\tif (_pin && _controller && _pinOptions.inFlow) {\n\t\t\t\t// no spacerresize, if original position is absolute\n\t\t\t\tvar during = _state === SCENE_STATE_DURING,\n\t\t\t\t    vertical = _controller.info(\"vertical\"),\n\t\t\t\t    pinTarget = _pinOptions.spacer.firstChild,\n\t\t\t\t    // usually the pined element but can also be another spacer (cascaded pins)\n\t\t\t\tmarginCollapse = _util.isMarginCollapseType(_util.css(_pinOptions.spacer, \"display\")),\n\t\t\t\t    css = {};\n\n\t\t\t\t// set new size\n\t\t\t\t// if relsize: spacer -> pin | else: pin -> spacer\n\t\t\t\tif (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) {\n\t\t\t\t\tif (during) {\n\t\t\t\t\t\t_util.css(_pin, {\n\t\t\t\t\t\t\t\"width\": _util.get.width(_pinOptions.spacer)\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_util.css(_pin, {\n\t\t\t\t\t\t\t\"width\": \"100%\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// minwidth is needed for cascaded pins.\n\t\t\t\t\tcss[\"min-width\"] = _util.get.width(vertical ? _pin : pinTarget, true, true);\n\t\t\t\t\tcss.width = during ? css[\"min-width\"] : \"auto\";\n\t\t\t\t}\n\t\t\t\tif (_pinOptions.relSize.height) {\n\t\t\t\t\tif (during) {\n\t\t\t\t\t\t// the only padding the spacer should ever include is the duration (if pushFollowers = true), so we need to substract that.\n\t\t\t\t\t\t_util.css(_pin, {\n\t\t\t\t\t\t\t\"height\": _util.get.height(_pinOptions.spacer) - (_pinOptions.pushFollowers ? _options.duration : 0)\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_util.css(_pin, {\n\t\t\t\t\t\t\t\"height\": \"100%\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// margin is only included if it's a cascaded pin to resolve an IE9 bug\n\t\t\t\t\tcss[\"min-height\"] = _util.get.height(vertical ? pinTarget : _pin, true, !marginCollapse); // needed for cascading pins\n\t\t\t\t\tcss.height = during ? css[\"min-height\"] : \"auto\";\n\t\t\t\t}\n\n\t\t\t\t// add space for duration if pushFollowers is true\n\t\t\t\tif (_pinOptions.pushFollowers) {\n\t\t\t\t\tcss[\"padding\" + (vertical ? \"Top\" : \"Left\")] = _options.duration * _progress;\n\t\t\t\t\tcss[\"padding\" + (vertical ? \"Bottom\" : \"Right\")] = _options.duration * (1 - _progress);\n\t\t\t\t}\n\t\t\t\t_util.css(_pinOptions.spacer, css);\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * Updates the Pin state (in certain scenarios)\r\n   * If the controller container is not the document and we are mid-pin-phase scrolling or resizing the main document can result to wrong pin positions.\r\n   * So this function is called on resize and scroll of the document.\r\n   * @private\r\n   */\n\t\tvar updatePinInContainer = function updatePinInContainer() {\n\t\t\tif (_controller && _pin && _state === SCENE_STATE_DURING && !_controller.info(\"isDocument\")) {\n\t\t\t\tupdatePinState();\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * Updates the Pin spacer size state (in certain scenarios)\r\n   * If container is resized during pin and relatively sized the size of the pin might need to be updated...\r\n   * So this function is called on resize of the container.\r\n   * @private\r\n   */\n\t\tvar updateRelativePinSpacer = function updateRelativePinSpacer() {\n\t\t\tif (_controller && _pin && // well, duh\n\t\t\t_state === SCENE_STATE_DURING && ( // element in pinned state?\n\t\t\t// is width or height relatively sized, but not in relation to body? then we need to recalc.\n\t\t\t(_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) && _util.get.width(window) != _util.get.width(_pinOptions.spacer.parentNode) || _pinOptions.relSize.height && _util.get.height(window) != _util.get.height(_pinOptions.spacer.parentNode))) {\n\t\t\t\tupdatePinDimensions();\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * Is called, when the mousewhel is used while over a pinned element inside a div container.\r\n   * If the scene is in fixed state scroll events would be counted towards the body. This forwards the event to the scroll container.\r\n   * @private\r\n   */\n\t\tvar onMousewheelOverPin = function onMousewheelOverPin(e) {\n\t\t\tif (_controller && _pin && _state === SCENE_STATE_DURING && !_controller.info(\"isDocument\")) {\n\t\t\t\t// in pin state\n\t\t\t\te.preventDefault();\n\t\t\t\t_controller._setScrollPos(_controller.info(\"scrollPos\") - ((e.wheelDelta || e[_controller.info(\"vertical\") ? \"wheelDeltaY\" : \"wheelDeltaX\"]) / 3 || -e.detail * 30));\n\t\t\t}\n\t\t};\n\n\t\t/**\r\n   * Pin an element for the duration of the scene.\r\n   * If the scene duration is 0 the element will only be unpinned, if the user scrolls back past the start position.  \r\n   * Make sure only one pin is applied to an element at the same time.\r\n   * An element can be pinned multiple times, but only successively.\r\n   * _**NOTE:** The option `pushFollowers` has no effect, when the scene duration is 0._\r\n   * @method ScrollMagic.Scene#setPin\r\n   * @example\r\n   * // pin element and push all following elements down by the amount of the pin duration.\r\n   * scene.setPin(\"#pin\");\r\n   *\r\n   * // pin element and keeping all following elements in their place. The pinned element will move past them.\r\n   * scene.setPin(\"#pin\", {pushFollowers: false});\r\n   *\r\n   * @param {(string|object)} element - A Selector targeting an element or a DOM object that is supposed to be pinned.\r\n   * @param {object} [settings] - settings for the pin\r\n   * @param {boolean} [settings.pushFollowers=true] - If `true` following elements will be \"pushed\" down for the duration of the pin, if `false` the pinned element will just scroll past them.  \r\n   \t\t\t\t\t\t\t\t\t\t\t\t   Ignored, when duration is `0`.\r\n   * @param {string} [settings.spacerClass=\"scrollmagic-pin-spacer\"] - Classname of the pin spacer element, which is used to replace the element.\r\n   *\r\n   * @returns {Scene} Parent object for chaining.\r\n   */\n\t\tthis.setPin = function (element, settings) {\n\t\t\tvar defaultSettings = {\n\t\t\t\tpushFollowers: true,\n\t\t\t\tspacerClass: \"scrollmagic-pin-spacer\"\n\t\t\t};\n\t\t\tvar pushFollowersActivelySet = settings && settings.hasOwnProperty('pushFollowers');\n\t\t\tsettings = _util.extend({}, defaultSettings, settings);\n\n\t\t\t// validate Element\n\t\t\telement = _util.get.elements(element)[0];\n\t\t\tif (!element) {\n\t\t\t\tlog(1, \"ERROR calling method 'setPin()': Invalid pin element supplied.\");\n\t\t\t\treturn Scene; // cancel\n\t\t\t} else if (_util.css(element, \"position\") === \"fixed\") {\n\t\t\t\tlog(1, \"ERROR calling method 'setPin()': Pin does not work with elements that are positioned 'fixed'.\");\n\t\t\t\treturn Scene; // cancel\n\t\t\t}\n\n\t\t\tif (_pin) {\n\t\t\t\t// preexisting pin?\n\t\t\t\tif (_pin === element) {\n\t\t\t\t\t// same pin we already have -> do nothing\n\t\t\t\t\treturn Scene; // cancel\n\t\t\t\t} else {\n\t\t\t\t\t// kill old pin\n\t\t\t\t\tScene.removePin();\n\t\t\t\t}\n\t\t\t}\n\t\t\t_pin = element;\n\n\t\t\tvar parentDisplay = _pin.parentNode.style.display,\n\t\t\t    boundsParams = [\"top\", \"left\", \"bottom\", \"right\", \"margin\", \"marginLeft\", \"marginRight\", \"marginTop\", \"marginBottom\"];\n\n\t\t\t_pin.parentNode.style.display = 'none'; // hack start to force css to return stylesheet values instead of calculated px values.\n\t\t\tvar inFlow = _util.css(_pin, \"position\") != \"absolute\",\n\t\t\t    pinCSS = _util.css(_pin, boundsParams.concat([\"display\"])),\n\t\t\t    sizeCSS = _util.css(_pin, [\"width\", \"height\"]);\n\t\t\t_pin.parentNode.style.display = parentDisplay; // hack end.\n\n\t\t\tif (!inFlow && settings.pushFollowers) {\n\t\t\t\tlog(2, \"WARNING: If the pinned element is positioned absolutely pushFollowers will be disabled.\");\n\t\t\t\tsettings.pushFollowers = false;\n\t\t\t}\n\t\t\twindow.setTimeout(function () {\n\t\t\t\t// wait until all finished, because with responsive duration it will only be set after scene is added to controller\n\t\t\t\tif (_pin && _options.duration === 0 && pushFollowersActivelySet && settings.pushFollowers) {\n\t\t\t\t\tlog(2, \"WARNING: pushFollowers =\", true, \"has no effect, when scene duration is 0.\");\n\t\t\t\t}\n\t\t\t}, 0);\n\n\t\t\t// create spacer and insert\n\t\t\tvar spacer = _pin.parentNode.insertBefore(document.createElement('div'), _pin),\n\t\t\t    spacerCSS = _util.extend(pinCSS, {\n\t\t\t\tposition: inFlow ? \"relative\" : \"absolute\",\n\t\t\t\tboxSizing: \"content-box\",\n\t\t\t\tmozBoxSizing: \"content-box\",\n\t\t\t\twebkitBoxSizing: \"content-box\"\n\t\t\t});\n\n\t\t\tif (!inFlow) {\n\t\t\t\t// copy size if positioned absolutely, to work for bottom/right positioned elements.\n\t\t\t\t_util.extend(spacerCSS, _util.css(_pin, [\"width\", \"height\"]));\n\t\t\t}\n\n\t\t\t_util.css(spacer, spacerCSS);\n\t\t\tspacer.setAttribute(PIN_SPACER_ATTRIBUTE, \"\");\n\t\t\t_util.addClass(spacer, settings.spacerClass);\n\n\t\t\t// set the pin Options\n\t\t\t_pinOptions = {\n\t\t\t\tspacer: spacer,\n\t\t\t\trelSize: { // save if size is defined using % values. if so, handle spacer resize differently...\n\t\t\t\t\twidth: sizeCSS.width.slice(-1) === \"%\",\n\t\t\t\t\theight: sizeCSS.height.slice(-1) === \"%\",\n\t\t\t\t\tautoFullWidth: sizeCSS.width === \"auto\" && inFlow && _util.isMarginCollapseType(pinCSS.display)\n\t\t\t\t},\n\t\t\t\tpushFollowers: settings.pushFollowers,\n\t\t\t\tinFlow: inFlow // stores if the element takes up space in the document flow\n\t\t\t};\n\n\t\t\tif (!_pin.___origStyle) {\n\t\t\t\t_pin.___origStyle = {};\n\t\t\t\tvar pinInlineCSS = _pin.style,\n\t\t\t\t    copyStyles = boundsParams.concat([\"width\", \"height\", \"position\", \"boxSizing\", \"mozBoxSizing\", \"webkitBoxSizing\"]);\n\t\t\t\tcopyStyles.forEach(function (val) {\n\t\t\t\t\t_pin.___origStyle[val] = pinInlineCSS[val] || \"\";\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// if relative size, transfer it to spacer and make pin calculate it...\n\t\t\tif (_pinOptions.relSize.width) {\n\t\t\t\t_util.css(spacer, {\n\t\t\t\t\twidth: sizeCSS.width\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (_pinOptions.relSize.height) {\n\t\t\t\t_util.css(spacer, {\n\t\t\t\t\theight: sizeCSS.height\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// now place the pin element inside the spacer\t\n\t\t\tspacer.appendChild(_pin);\n\t\t\t// and set new css\n\t\t\t_util.css(_pin, {\n\t\t\t\tposition: inFlow ? \"relative\" : \"absolute\",\n\t\t\t\tmargin: \"auto\",\n\t\t\t\ttop: \"auto\",\n\t\t\t\tleft: \"auto\",\n\t\t\t\tbottom: \"auto\",\n\t\t\t\tright: \"auto\"\n\t\t\t});\n\n\t\t\tif (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) {\n\t\t\t\t_util.css(_pin, {\n\t\t\t\t\tboxSizing: \"border-box\",\n\t\t\t\t\tmozBoxSizing: \"border-box\",\n\t\t\t\t\twebkitBoxSizing: \"border-box\"\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// add listener to document to update pin position in case controller is not the document.\n\t\t\twindow.addEventListener('scroll', updatePinInContainer);\n\t\t\twindow.addEventListener('resize', updatePinInContainer);\n\t\t\twindow.addEventListener('resize', updateRelativePinSpacer);\n\t\t\t// add mousewheel listener to catch scrolls over fixed elements\n\t\t\t_pin.addEventListener(\"mousewheel\", onMousewheelOverPin);\n\t\t\t_pin.addEventListener(\"DOMMouseScroll\", onMousewheelOverPin);\n\n\t\t\tlog(3, \"added pin\");\n\n\t\t\t// finally update the pin to init\n\t\t\tupdatePinState();\n\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\r\n   * Remove the pin from the scene.\r\n   * @method ScrollMagic.Scene#removePin\r\n   * @example\r\n   * // remove the pin from the scene without resetting it (the spacer is not removed)\r\n   * scene.removePin();\r\n   *\r\n   * // remove the pin from the scene and reset the pin element to its initial position (spacer is removed)\r\n   * scene.removePin(true);\r\n   *\r\n   * @param {boolean} [reset=false] - If `false` the spacer will not be removed and the element's position will not be reset.\r\n   * @returns {Scene} Parent object for chaining.\r\n   */\n\t\tthis.removePin = function (reset) {\n\t\t\tif (_pin) {\n\t\t\t\tif (_state === SCENE_STATE_DURING) {\n\t\t\t\t\tupdatePinState(true); // force unpin at position\n\t\t\t\t}\n\t\t\t\tif (reset || !_controller) {\n\t\t\t\t\t// if there's no controller no progress was made anyway...\n\t\t\t\t\tvar pinTarget = _pinOptions.spacer.firstChild; // usually the pin element, but may be another spacer (cascaded pins)...\n\t\t\t\t\tif (pinTarget.hasAttribute(PIN_SPACER_ATTRIBUTE)) {\n\t\t\t\t\t\t// copy margins to child spacer\n\t\t\t\t\t\tvar style = _pinOptions.spacer.style,\n\t\t\t\t\t\t    values = [\"margin\", \"marginLeft\", \"marginRight\", \"marginTop\", \"marginBottom\"],\n\t\t\t\t\t\t    margins = {};\n\t\t\t\t\t\tvalues.forEach(function (val) {\n\t\t\t\t\t\t\tmargins[val] = style[val] || \"\";\n\t\t\t\t\t\t});\n\t\t\t\t\t\t_util.css(pinTarget, margins);\n\t\t\t\t\t}\n\t\t\t\t\t_pinOptions.spacer.parentNode.insertBefore(pinTarget, _pinOptions.spacer);\n\t\t\t\t\t_pinOptions.spacer.parentNode.removeChild(_pinOptions.spacer);\n\t\t\t\t\tif (!_pin.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {\n\t\t\t\t\t\t// if it's the last pin for this element -> restore inline styles\n\t\t\t\t\t\t// TODO: only correctly set for first pin (when cascading) - how to fix?\n\t\t\t\t\t\t_util.css(_pin, _pin.___origStyle);\n\t\t\t\t\t\tdelete _pin.___origStyle;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twindow.removeEventListener('scroll', updatePinInContainer);\n\t\t\t\twindow.removeEventListener('resize', updatePinInContainer);\n\t\t\t\twindow.removeEventListener('resize', updateRelativePinSpacer);\n\t\t\t\t_pin.removeEventListener(\"mousewheel\", onMousewheelOverPin);\n\t\t\t\t_pin.removeEventListener(\"DOMMouseScroll\", onMousewheelOverPin);\n\t\t\t\t_pin = undefined;\n\t\t\t\tlog(3, \"removed pin (reset: \" + (reset ? \"true\" : \"false\") + \")\");\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\tvar _cssClasses,\n\t\t    _cssClassElems = [];\n\n\t\tScene.on(\"destroy.internal\", function (e) {\n\t\t\tScene.removeClassToggle(e.reset);\n\t\t});\n\t\t/**\r\n   * Define a css class modification while the scene is active.  \r\n   * When the scene triggers the classes will be added to the supplied element and removed, when the scene is over.\r\n   * If the scene duration is 0 the classes will only be removed if the user scrolls back past the start position.\r\n   * @method ScrollMagic.Scene#setClassToggle\r\n   * @example\r\n   * // add the class 'myclass' to the element with the id 'my-elem' for the duration of the scene\r\n   * scene.setClassToggle(\"#my-elem\", \"myclass\");\r\n   *\r\n   * // add multiple classes to multiple elements defined by the selector '.classChange'\r\n   * scene.setClassToggle(\".classChange\", \"class1 class2 class3\");\r\n   *\r\n   * @param {(string|object)} element - A Selector targeting one or more elements or a DOM object that is supposed to be modified.\r\n   * @param {string} classes - One or more Classnames (separated by space) that should be added to the element during the scene.\r\n   *\r\n   * @returns {Scene} Parent object for chaining.\r\n   */\n\t\tthis.setClassToggle = function (element, classes) {\n\t\t\tvar elems = _util.get.elements(element);\n\t\t\tif (elems.length === 0 || !_util.type.String(classes)) {\n\t\t\t\tlog(1, \"ERROR calling method 'setClassToggle()': Invalid \" + (elems.length === 0 ? \"element\" : \"classes\") + \" supplied.\");\n\t\t\t\treturn Scene;\n\t\t\t}\n\t\t\tif (_cssClassElems.length > 0) {\n\t\t\t\t// remove old ones\n\t\t\t\tScene.removeClassToggle();\n\t\t\t}\n\t\t\t_cssClasses = classes;\n\t\t\t_cssClassElems = elems;\n\t\t\tScene.on(\"enter.internal_class leave.internal_class\", function (e) {\n\t\t\t\tvar toggle = e.type === \"enter\" ? _util.addClass : _util.removeClass;\n\t\t\t\t_cssClassElems.forEach(function (elem, key) {\n\t\t\t\t\ttoggle(elem, _cssClasses);\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\r\n   * Remove the class binding from the scene.\r\n   * @method ScrollMagic.Scene#removeClassToggle\r\n   * @example\r\n   * // remove class binding from the scene without reset\r\n   * scene.removeClassToggle();\r\n   *\r\n   * // remove class binding and remove the changes it caused\r\n   * scene.removeClassToggle(true);\r\n   *\r\n   * @param {boolean} [reset=false] - If `false` and the classes are currently active, they will remain on the element. If `true` they will be removed.\r\n   * @returns {Scene} Parent object for chaining.\r\n   */\n\t\tthis.removeClassToggle = function (reset) {\n\t\t\tif (reset) {\n\t\t\t\t_cssClassElems.forEach(function (elem, key) {\n\t\t\t\t\t_util.removeClass(elem, _cssClasses);\n\t\t\t\t});\n\t\t\t}\n\t\t\tScene.off(\"start.internal_class end.internal_class\");\n\t\t\t_cssClasses = undefined;\n\t\t\t_cssClassElems = [];\n\t\t\treturn Scene;\n\t\t};\n\n\t\t// INIT\n\t\tconstruct();\n\t\treturn Scene;\n\t};\n\n\t// store pagewide scene options\n\tvar SCENE_OPTIONS = {\n\t\tdefaults: {\n\t\t\tduration: 0,\n\t\t\toffset: 0,\n\t\t\ttriggerElement: undefined,\n\t\t\ttriggerHook: 0.5,\n\t\t\treverse: true,\n\t\t\tloglevel: 2\n\t\t},\n\t\tvalidate: {\n\t\t\toffset: function offset(val) {\n\t\t\t\tval = parseFloat(val);\n\t\t\t\tif (!_util.type.Number(val)) {\n\t\t\t\t\tthrow [\"Invalid value for option \\\"offset\\\":\", val];\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t},\n\t\t\ttriggerElement: function triggerElement(val) {\n\t\t\t\tval = val || undefined;\n\t\t\t\tif (val) {\n\t\t\t\t\tvar elem = _util.get.elements(val)[0];\n\t\t\t\t\tif (elem && elem.parentNode) {\n\t\t\t\t\t\tval = elem;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow [\"Element defined in option \\\"triggerElement\\\" was not found:\", val];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t},\n\t\t\ttriggerHook: function triggerHook(val) {\n\t\t\t\tvar translate = {\n\t\t\t\t\t\"onCenter\": 0.5,\n\t\t\t\t\t\"onEnter\": 1,\n\t\t\t\t\t\"onLeave\": 0\n\t\t\t\t};\n\t\t\t\tif (_util.type.Number(val)) {\n\t\t\t\t\tval = Math.max(0, Math.min(parseFloat(val), 1)); //  make sure its betweeen 0 and 1\n\t\t\t\t} else if (val in translate) {\n\t\t\t\t\tval = translate[val];\n\t\t\t\t} else {\n\t\t\t\t\tthrow [\"Invalid value for option \\\"triggerHook\\\": \", val];\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t},\n\t\t\treverse: function reverse(val) {\n\t\t\t\treturn !!val; // force boolean\n\t\t\t},\n\t\t\tloglevel: function loglevel(val) {\n\t\t\t\tval = parseInt(val);\n\t\t\t\tif (!_util.type.Number(val) || val < 0 || val > 3) {\n\t\t\t\t\tthrow [\"Invalid value for option \\\"loglevel\\\":\", val];\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t}\n\t\t}, // holder for  validation methods. duration validation is handled in 'getters-setters.js'\n\t\tshifts: [\"duration\", \"offset\", \"triggerHook\"] // list of options that trigger a `shift` event\n\t};\n\t/*\r\n  * method used to add an option to ScrollMagic Scenes.\r\n  * TODO: DOC (private for dev)\r\n  */\n\tScrollMagic.Scene.addOption = function (name, defaultValue, validationCallback, shifts) {\n\t\tif (!(name in SCENE_OPTIONS.defaults)) {\n\t\t\tSCENE_OPTIONS.defaults[name] = defaultValue;\n\t\t\tSCENE_OPTIONS.validate[name] = validationCallback;\n\t\t\tif (shifts) {\n\t\t\t\tSCENE_OPTIONS.shifts.push(name);\n\t\t\t}\n\t\t} else {\n\t\t\tScrollMagic._util.log(1, \"[static] ScrollMagic.Scene -> Cannot add Scene option '\" + name + \"', because it already exists.\");\n\t\t}\n\t};\n\t// instance extension function for plugins\n\t// TODO: DOC (private for dev)\n\tScrollMagic.Scene.extend = function (extension) {\n\t\tvar oldClass = this;\n\t\tScrollMagic.Scene = function () {\n\t\t\toldClass.apply(this, arguments);\n\t\t\tthis.$super = _util.extend({}, this); // copy parent state\n\t\t\treturn extension.apply(this, arguments) || this;\n\t\t};\n\t\t_util.extend(ScrollMagic.Scene, oldClass); // copy properties\n\t\tScrollMagic.Scene.prototype = oldClass.prototype; // copy prototype\n\t\tScrollMagic.Scene.prototype.constructor = ScrollMagic.Scene; // restore constructor\n\t};\n\n\t/**\r\n  * TODO: DOCS (private for dev)\r\n  * @class\r\n  * @private\r\n  */\n\n\tScrollMagic.Event = function (type, namespace, target, vars) {\n\t\tvars = vars || {};\n\t\tfor (var key in vars) {\n\t\t\tthis[key] = vars[key];\n\t\t}\n\t\tthis.type = type;\n\t\tthis.target = this.currentTarget = target;\n\t\tthis.namespace = namespace || '';\n\t\tthis.timeStamp = this.timestamp = Date.now();\n\t\treturn this;\n\t};\n\n\t/*\r\n  * TODO: DOCS (private for dev)\r\n  */\n\n\tvar _util = ScrollMagic._util = function (window) {\n\t\tvar U = {},\n\t\t    i;\n\n\t\t/**\r\n   * ------------------------------\r\n   * internal helpers\r\n   * ------------------------------\r\n   */\n\n\t\t// parse float and fall back to 0.\n\t\tvar floatval = function floatval(number) {\n\t\t\treturn parseFloat(number) || 0;\n\t\t};\n\t\t// get current style IE safe (otherwise IE would return calculated values for 'auto')\n\t\tvar _getComputedStyle = function _getComputedStyle(elem) {\n\t\t\treturn elem.currentStyle ? elem.currentStyle : window.getComputedStyle(elem);\n\t\t};\n\n\t\t// get element dimension (width or height)\n\t\tvar _dimension = function _dimension(which, elem, outer, includeMargin) {\n\t\t\telem = elem === document ? window : elem;\n\t\t\tif (elem === window) {\n\t\t\t\tincludeMargin = false;\n\t\t\t} else if (!_type.DomElement(elem)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\twhich = which.charAt(0).toUpperCase() + which.substr(1).toLowerCase();\n\t\t\tvar dimension = (outer ? elem['offset' + which] || elem['outer' + which] : elem['client' + which] || elem['inner' + which]) || 0;\n\t\t\tif (outer && includeMargin) {\n\t\t\t\tvar style = _getComputedStyle(elem);\n\t\t\t\tdimension += which === 'Height' ? floatval(style.marginTop) + floatval(style.marginBottom) : floatval(style.marginLeft) + floatval(style.marginRight);\n\t\t\t}\n\t\t\treturn dimension;\n\t\t};\n\t\t// converts 'margin-top' into 'marginTop'\n\t\tvar _camelCase = function _camelCase(str) {\n\t\t\treturn str.replace(/^[^a-z]+([a-z])/g, '$1').replace(/-([a-z])/g, function (g) {\n\t\t\t\treturn g[1].toUpperCase();\n\t\t\t});\n\t\t};\n\n\t\t/**\r\n   * ------------------------------\r\n   * external helpers\r\n   * ------------------------------\r\n   */\n\n\t\t// extend obj – same as jQuery.extend({}, objA, objB)\n\t\tU.extend = function (obj) {\n\t\t\tobj = obj || {};\n\t\t\tfor (i = 1; i < arguments.length; i++) {\n\t\t\t\tif (!arguments[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (var key in arguments[i]) {\n\t\t\t\t\tif (arguments[i].hasOwnProperty(key)) {\n\t\t\t\t\t\tobj[key] = arguments[i][key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\t// check if a css display type results in margin-collapse or not\n\t\tU.isMarginCollapseType = function (str) {\n\t\t\treturn [\"block\", \"flex\", \"list-item\", \"table\", \"-webkit-box\"].indexOf(str) > -1;\n\t\t};\n\n\t\t// implementation of requestAnimationFrame\n\t\t// based on https://gist.github.com/paulirish/1579671\n\t\tvar lastTime = 0,\n\t\t    vendors = ['ms', 'moz', 'webkit', 'o'];\n\t\tvar _requestAnimationFrame = window.requestAnimationFrame;\n\t\tvar _cancelAnimationFrame = window.cancelAnimationFrame;\n\t\t// try vendor prefixes if the above doesn't work\n\t\tfor (i = 0; !_requestAnimationFrame && i < vendors.length; ++i) {\n\t\t\t_requestAnimationFrame = window[vendors[i] + 'RequestAnimationFrame'];\n\t\t\t_cancelAnimationFrame = window[vendors[i] + 'CancelAnimationFrame'] || window[vendors[i] + 'CancelRequestAnimationFrame'];\n\t\t}\n\n\t\t// fallbacks\n\t\tif (!_requestAnimationFrame) {\n\t\t\t_requestAnimationFrame = function _requestAnimationFrame(callback) {\n\t\t\t\tvar currTime = new Date().getTime(),\n\t\t\t\t    timeToCall = Math.max(0, 16 - (currTime - lastTime)),\n\t\t\t\t    id = window.setTimeout(function () {\n\t\t\t\t\tcallback(currTime + timeToCall);\n\t\t\t\t}, timeToCall);\n\t\t\t\tlastTime = currTime + timeToCall;\n\t\t\t\treturn id;\n\t\t\t};\n\t\t}\n\t\tif (!_cancelAnimationFrame) {\n\t\t\t_cancelAnimationFrame = function _cancelAnimationFrame(id) {\n\t\t\t\twindow.clearTimeout(id);\n\t\t\t};\n\t\t}\n\t\tU.rAF = _requestAnimationFrame.bind(window);\n\t\tU.cAF = _cancelAnimationFrame.bind(window);\n\n\t\tvar loglevels = [\"error\", \"warn\", \"log\"],\n\t\t    console = window.console || {};\n\n\t\tconsole.log = console.log || function () {}; // no console log, well - do nothing then...\n\t\t// make sure methods for all levels exist.\n\t\tfor (i = 0; i < loglevels.length; i++) {\n\t\t\tvar method = loglevels[i];\n\t\t\tif (!console[method]) {\n\t\t\t\tconsole[method] = console.log; // prefer .log over nothing\n\t\t\t}\n\t\t}\n\t\tU.log = function (loglevel) {\n\t\t\tif (loglevel > loglevels.length || loglevel <= 0) loglevel = loglevels.length;\n\t\t\tvar now = new Date(),\n\t\t\t    time = (\"0\" + now.getHours()).slice(-2) + \":\" + (\"0\" + now.getMinutes()).slice(-2) + \":\" + (\"0\" + now.getSeconds()).slice(-2) + \":\" + (\"00\" + now.getMilliseconds()).slice(-3),\n\t\t\t    method = loglevels[loglevel - 1],\n\t\t\t    args = Array.prototype.splice.call(arguments, 1),\n\t\t\t    func = Function.prototype.bind.call(console[method], console);\n\t\t\targs.unshift(time);\n\t\t\tfunc.apply(console, args);\n\t\t};\n\n\t\t/**\r\n   * ------------------------------\r\n   * type testing\r\n   * ------------------------------\r\n   */\n\n\t\tvar _type = U.type = function (v) {\n\t\t\treturn Object.prototype.toString.call(v).replace(/^\\[object (.+)\\]$/, \"$1\").toLowerCase();\n\t\t};\n\t\t_type.String = function (v) {\n\t\t\treturn _type(v) === 'string';\n\t\t};\n\t\t_type.Function = function (v) {\n\t\t\treturn _type(v) === 'function';\n\t\t};\n\t\t_type.Array = function (v) {\n\t\t\treturn Array.isArray(v);\n\t\t};\n\t\t_type.Number = function (v) {\n\t\t\treturn !_type.Array(v) && v - parseFloat(v) + 1 >= 0;\n\t\t};\n\t\t_type.DomElement = function (o) {\n\t\t\treturn (typeof HTMLElement === \"undefined\" ? \"undefined\" : _typeof(HTMLElement)) === \"object\" || typeof HTMLElement === \"function\" ? o instanceof HTMLElement || o instanceof SVGElement : //DOM2\n\t\t\to && (typeof o === \"undefined\" ? \"undefined\" : _typeof(o)) === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\";\n\t\t};\n\n\t\t/**\r\n   * ------------------------------\r\n   * DOM Element info\r\n   * ------------------------------\r\n   */\n\t\t// always returns a list of matching DOM elements, from a selector, a DOM element or an list of elements or even an array of selectors\n\t\tvar _get = U.get = {};\n\t\t_get.elements = function (selector) {\n\t\t\tvar arr = [];\n\t\t\tif (_type.String(selector)) {\n\t\t\t\ttry {\n\t\t\t\t\tselector = document.querySelectorAll(selector);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// invalid selector\n\t\t\t\t\treturn arr;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (_type(selector) === 'nodelist' || _type.Array(selector) || selector instanceof NodeList) {\n\t\t\t\tfor (var i = 0, ref = arr.length = selector.length; i < ref; i++) {\n\t\t\t\t\t// list of elements\n\t\t\t\t\tvar elem = selector[i];\n\t\t\t\t\tarr[i] = _type.DomElement(elem) ? elem : _get.elements(elem); // if not an element, try to resolve recursively\n\t\t\t\t}\n\t\t\t} else if (_type.DomElement(selector) || selector === document || selector === window) {\n\t\t\t\tarr = [selector]; // only the element\n\t\t\t}\n\t\t\treturn arr;\n\t\t};\n\t\t// get scroll top value\n\t\t_get.scrollTop = function (elem) {\n\t\t\treturn elem && typeof elem.scrollTop === 'number' ? elem.scrollTop : window.pageYOffset || 0;\n\t\t};\n\t\t// get scroll left value\n\t\t_get.scrollLeft = function (elem) {\n\t\t\treturn elem && typeof elem.scrollLeft === 'number' ? elem.scrollLeft : window.pageXOffset || 0;\n\t\t};\n\t\t// get element height\n\t\t_get.width = function (elem, outer, includeMargin) {\n\t\t\treturn _dimension('width', elem, outer, includeMargin);\n\t\t};\n\t\t// get element width\n\t\t_get.height = function (elem, outer, includeMargin) {\n\t\t\treturn _dimension('height', elem, outer, includeMargin);\n\t\t};\n\n\t\t// get element position (optionally relative to viewport)\n\t\t_get.offset = function (elem, relativeToViewport) {\n\t\t\tvar offset = {\n\t\t\t\ttop: 0,\n\t\t\t\tleft: 0\n\t\t\t};\n\t\t\tif (elem && elem.getBoundingClientRect) {\n\t\t\t\t// check if available\n\t\t\t\tvar rect = elem.getBoundingClientRect();\n\t\t\t\toffset.top = rect.top;\n\t\t\t\toffset.left = rect.left;\n\t\t\t\tif (!relativeToViewport) {\n\t\t\t\t\t// clientRect is by default relative to viewport...\n\t\t\t\t\toffset.top += _get.scrollTop();\n\t\t\t\t\toffset.left += _get.scrollLeft();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn offset;\n\t\t};\n\n\t\t/**\r\n   * ------------------------------\r\n   * DOM Element manipulation\r\n   * ------------------------------\r\n   */\n\n\t\tU.addClass = function (elem, classname) {\n\t\t\tif (classname) {\n\t\t\t\tif (elem.classList) elem.classList.add(classname);else elem.className += ' ' + classname;\n\t\t\t}\n\t\t};\n\t\tU.removeClass = function (elem, classname) {\n\t\t\tif (classname) {\n\t\t\t\tif (elem.classList) elem.classList.remove(classname);else elem.className = elem.className.replace(new RegExp('(^|\\\\b)' + classname.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n\t\t\t}\n\t\t};\n\t\t// if options is string -> returns css value\n\t\t// if options is array -> returns object with css value pairs\n\t\t// if options is object -> set new css values\n\t\tU.css = function (elem, options) {\n\t\t\tif (_type.String(options)) {\n\t\t\t\treturn _getComputedStyle(elem)[_camelCase(options)];\n\t\t\t} else if (_type.Array(options)) {\n\t\t\t\tvar obj = {},\n\t\t\t\t    style = _getComputedStyle(elem);\n\t\t\t\toptions.forEach(function (option, key) {\n\t\t\t\t\tobj[option] = style[_camelCase(option)];\n\t\t\t\t});\n\t\t\t\treturn obj;\n\t\t\t} else {\n\t\t\t\tfor (var option in options) {\n\t\t\t\t\tvar val = options[option];\n\t\t\t\t\tif (val == parseFloat(val)) {\n\t\t\t\t\t\t// assume pixel for seemingly numerical values\n\t\t\t\t\t\tval += 'px';\n\t\t\t\t\t}\n\t\t\t\t\telem.style[_camelCase(option)] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn U;\n\t}(window || {});\n\n\treturn ScrollMagic;\n})(typeof window === 'undefined' ? windowMock : window, typeof document === 'undefined' ? {} : document);\n\nvar ControllerContext = react__WEBPACK_IMPORTED_MODULE_0___default().createContext(null);\n\nvar Controller = function (_React$Component) {\n  inherits(Controller, _React$Component);\n\n  function Controller() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, Controller);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Controller.__proto__ || Object.getPrototypeOf(Controller)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      controller: null\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(Controller, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          children = _props.children,\n          controllerProps = objectWithoutProperties(_props, ['children']);\n\n      this.setState({\n        controller: new ScrollMagic.Controller(controllerProps)\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.controller = null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var children = this.props.children;\n      var controller = this.state.controller;\n\n\n      if (!controller) {\n        return children;\n      }\n\n      return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\n        ControllerContext.Provider,\n        { value: controller },\n        children\n      );\n    }\n  }]);\n  return Controller;\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\n/*!\r\n * ScrollMagic v2.0.7 (2019-05-07)\r\n * The javascript library for magical scroll interactions.\r\n * (c) 2019 Jan Paepke (@janpaepke)\r\n * Project Website: http://scrollmagic.io\r\n * \r\n * @version 2.0.7\r\n * @license Dual licensed under MIT license and GPL.\r\n * @author Jan Paepke - e-mail@janpaepke.de\r\n *\r\n * @file Debug Extension for ScrollMagic.\r\n */\nfunction debugAddIndicators (ScrollMagic) {\n\tvar NAMESPACE = \"debug.addIndicators\";\n\n\tif (typeof window === 'undefined') {\n\t\tvar window = {};\n\t\twindow.addEventListener = function () {};\n\t}\n\n\tvar console = window.console || {},\n\t    err = Function.prototype.bind.call(console.error || console.log || function () {}, console);\n\tif (!ScrollMagic) {\n\t\terr(\"(\" + NAMESPACE + \") -> ERROR: The ScrollMagic main module could not be found. Please make sure it's loaded before this plugin or use an asynchronous loader like requirejs.\");\n\t}\n\n\t// plugin settings\n\tvar FONT_SIZE = \"0.85em\",\n\t    ZINDEX = \"9999\",\n\t    EDGE_OFFSET = 15; // minimum edge distance, added to indentation\n\n\t// overall vars\n\tvar _util = ScrollMagic._util,\n\t    _autoindex = 0;\n\n\tScrollMagic.Scene.extend(function () {\n\t\tvar Scene = this,\n\t\t    _indicator;\n\n\t\t/**\r\n   * Add visual indicators for a ScrollMagic.Scene.  \r\n   * @memberof! debug.addIndicators#\r\n   *\r\n   * @example\r\n   * // add basic indicators\r\n   * scene.addIndicators()\r\n   *\r\n   * // passing options\r\n   * scene.addIndicators({name: \"pin scene\", colorEnd: \"#FFFFFF\"});\r\n   *\r\n   * @param {object} [options] - An object containing one or more options for the indicators.\r\n   * @param {(string|object)} [options.parent] - A selector, DOM Object or a jQuery object that the indicators should be added to.  \r\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t If undefined, the controller's container will be used.\r\n   * @param {number} [options.name=\"\"] - This string will be displayed at the start and end indicators of the scene for identification purposes. If no name is supplied an automatic index will be used.\r\n   * @param {number} [options.indent=0] - Additional position offset for the indicators (useful, when having multiple scenes starting at the same position).\r\n   * @param {string} [options.colorStart=green] - CSS color definition for the start indicator.\r\n   * @param {string} [options.colorEnd=red] - CSS color definition for the end indicator.\r\n   * @param {string} [options.colorTrigger=blue] - CSS color definition for the trigger indicator.\r\n   */\n\t\tScene.addIndicators = function (options) {\n\t\t\tif (!_indicator) {\n\t\t\t\tvar DEFAULT_OPTIONS = {\n\t\t\t\t\tname: \"\",\n\t\t\t\t\tindent: 0,\n\t\t\t\t\tparent: undefined,\n\t\t\t\t\tcolorStart: \"green\",\n\t\t\t\t\tcolorEnd: \"red\",\n\t\t\t\t\tcolorTrigger: \"blue\"\n\t\t\t\t};\n\n\t\t\t\toptions = _util.extend({}, DEFAULT_OPTIONS, options);\n\n\t\t\t\t_autoindex++;\n\t\t\t\t_indicator = new Indicator(Scene, options);\n\n\t\t\t\tScene.on(\"add.plugin_addIndicators\", _indicator.add);\n\t\t\t\tScene.on(\"remove.plugin_addIndicators\", _indicator.remove);\n\t\t\t\tScene.on(\"destroy.plugin_addIndicators\", Scene.removeIndicators);\n\n\t\t\t\t// it the scene already has a controller we can start right away.\n\t\t\t\tif (Scene.controller()) {\n\t\t\t\t\t_indicator.add();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\r\n   * Removes visual indicators from a ScrollMagic.Scene.\r\n   * @memberof! debug.addIndicators#\r\n   *\r\n   * @example\r\n   * // remove previously added indicators\r\n   * scene.removeIndicators()\r\n   *\r\n   */\n\t\tScene.removeIndicators = function () {\n\t\t\tif (_indicator) {\n\t\t\t\t_indicator.remove();\n\t\t\t\tthis.off(\"*.plugin_addIndicators\");\n\t\t\t\t_indicator = undefined;\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\t});\n\n\t/*\r\n  * ----------------------------------------------------------------\r\n  * Extension for controller to store and update related indicators\r\n  * ----------------------------------------------------------------\r\n  */\n\t// add option to globally auto-add indicators to scenes\n\t/**\r\n  * Every ScrollMagic.Controller instance now accepts an additional option.  \r\n  * See {@link ScrollMagic.Controller} for a complete list of the standard options.\r\n  * @memberof! debug.addIndicators#\r\n  * @method new ScrollMagic.Controller(options)\r\n  * @example\r\n  * // make a controller and add indicators to all scenes attached\r\n  * var controller = new ScrollMagic.Controller({addIndicators: true});\r\n  * // this scene will automatically have indicators added to it\r\n  * new ScrollMagic.Scene()\r\n  *                .addTo(controller);\r\n  *\r\n  * @param {object} [options] - Options for the Controller.\r\n  * @param {boolean} [options.addIndicators=false] - If set to `true` every scene that is added to the controller will automatically get indicators added to it.\r\n  */\n\tScrollMagic.Controller.addOption(\"addIndicators\", false);\n\t// extend Controller\n\tScrollMagic.Controller.extend(function () {\n\t\tvar Controller = this,\n\t\t    _info = Controller.info(),\n\t\t    _container = _info.container,\n\t\t    _isDocument = _info.isDocument,\n\t\t    _vertical = _info.vertical,\n\t\t    _indicators = { // container for all indicators and methods\n\t\t\tgroups: []\n\t\t};\n\n\t\tvar log = function log() {\n\t\t\tif (Controller._log) {\n\t\t\t\t// not available, when main source minified\n\t\t\t\tArray.prototype.splice.call(arguments, 1, 0, \"(\" + NAMESPACE + \")\", \"->\");\n\t\t\t\tController._log.apply(this, arguments);\n\t\t\t}\n\t\t};\n\t\tif (Controller._indicators) {\n\t\t\tlog(2, \"WARNING: Scene already has a property '_indicators', which will be overwritten by plugin.\");\n\t\t}\n\n\t\t// add indicators container\n\t\tthis._indicators = _indicators;\n\t\t/*\r\n  \tneeded updates:\r\n  \t+++++++++++++++\r\n  \tstart/end position on scene shift (handled in Indicator class)\r\n  \ttrigger parameters on triggerHook value change (handled in Indicator class)\r\n  \tbounds position on container scroll or resize (to keep alignment to bottom/right)\r\n  \ttrigger position on container resize, window resize (if container isn't document) and window scroll (if container isn't document)\r\n  */\n\n\t\t// event handler for when associated bounds markers need to be repositioned\n\t\tvar handleBoundsPositionChange = function handleBoundsPositionChange() {\n\t\t\t_indicators.updateBoundsPositions();\n\t\t};\n\n\t\t// event handler for when associated trigger groups need to be repositioned\n\t\tvar handleTriggerPositionChange = function handleTriggerPositionChange() {\n\t\t\t_indicators.updateTriggerGroupPositions();\n\t\t};\n\n\t\t_container.addEventListener(\"resize\", handleTriggerPositionChange);\n\t\tif (!_isDocument) {\n\t\t\twindow.addEventListener(\"resize\", handleTriggerPositionChange);\n\t\t\twindow.addEventListener(\"scroll\", handleTriggerPositionChange);\n\t\t}\n\t\t// update all related bounds containers\n\t\t_container.addEventListener(\"resize\", handleBoundsPositionChange);\n\t\t_container.addEventListener(\"scroll\", handleBoundsPositionChange);\n\n\t\t// updates the position of the bounds container to aligned to the right for vertical containers and to the bottom for horizontal\n\t\tthis._indicators.updateBoundsPositions = function (specificIndicator) {\n\t\t\tvar // constant for all bounds\n\t\t\tgroups = specificIndicator ? [_util.extend({}, specificIndicator.triggerGroup, {\n\t\t\t\tmembers: [specificIndicator]\n\t\t\t})] : // create a group with only one element\n\t\t\t_indicators.groups,\n\t\t\t    // use all\n\t\t\tg = groups.length,\n\t\t\t    css = {},\n\t\t\t    paramPos = _vertical ? \"left\" : \"top\",\n\t\t\t    paramDimension = _vertical ? \"width\" : \"height\",\n\t\t\t    edge = _vertical ? _util.get.scrollLeft(_container) + _util.get.width(_container) - EDGE_OFFSET : _util.get.scrollTop(_container) + _util.get.height(_container) - EDGE_OFFSET,\n\t\t\t    b,\n\t\t\t    triggerSize,\n\t\t\t    group;\n\t\t\twhile (g--) {\n\t\t\t\t// group loop\n\t\t\t\tgroup = groups[g];\n\t\t\t\tb = group.members.length;\n\t\t\t\ttriggerSize = _util.get[paramDimension](group.element.firstChild);\n\t\t\t\twhile (b--) {\n\t\t\t\t\t// indicators loop\n\t\t\t\t\tcss[paramPos] = edge - triggerSize;\n\t\t\t\t\t_util.css(group.members[b].bounds, css);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// updates the positions of all trigger groups attached to a controller or a specific one, if provided\n\t\tthis._indicators.updateTriggerGroupPositions = function (specificGroup) {\n\t\t\tvar // constant vars\n\t\t\tgroups = specificGroup ? [specificGroup] : _indicators.groups,\n\t\t\t    i = groups.length,\n\t\t\t    container = _isDocument ? document.body : _container,\n\t\t\t    containerOffset = _isDocument ? {\n\t\t\t\ttop: 0,\n\t\t\t\tleft: 0\n\t\t\t} : _util.get.offset(container, true),\n\t\t\t    edge = _vertical ? _util.get.width(_container) - EDGE_OFFSET : _util.get.height(_container) - EDGE_OFFSET,\n\t\t\t    paramDimension = _vertical ? \"width\" : \"height\",\n\t\t\t    paramTransform = _vertical ? \"Y\" : \"X\";\n\t\t\tvar // changing vars\n\t\t\tgroup, elem, pos, elemSize, transform;\n\t\t\twhile (i--) {\n\t\t\t\tgroup = groups[i];\n\t\t\t\telem = group.element;\n\t\t\t\tpos = group.triggerHook * Controller.info(\"size\");\n\t\t\t\telemSize = _util.get[paramDimension](elem.firstChild.firstChild);\n\t\t\t\ttransform = pos > elemSize ? \"translate\" + paramTransform + \"(-100%)\" : \"\";\n\n\t\t\t\t_util.css(elem, {\n\t\t\t\t\ttop: containerOffset.top + (_vertical ? pos : edge - group.members[0].options.indent),\n\t\t\t\t\tleft: containerOffset.left + (_vertical ? edge - group.members[0].options.indent : pos)\n\t\t\t\t});\n\t\t\t\t_util.css(elem.firstChild.firstChild, {\n\t\t\t\t\t\"-ms-transform\": transform,\n\t\t\t\t\t\"-webkit-transform\": transform,\n\t\t\t\t\t\"transform\": transform\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\t// updates the label for the group to contain the name, if it only has one member\n\t\tthis._indicators.updateTriggerGroupLabel = function (group) {\n\t\t\tvar text = \"trigger\" + (group.members.length > 1 ? \"\" : \" \" + group.members[0].options.name),\n\t\t\t    elem = group.element.firstChild.firstChild,\n\t\t\t    doUpdate = elem.textContent !== text;\n\t\t\tif (doUpdate) {\n\t\t\t\telem.textContent = text;\n\t\t\t\tif (_vertical) {\n\t\t\t\t\t// bounds position is dependent on text length, so update\n\t\t\t\t\t_indicators.updateBoundsPositions();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// add indicators if global option is set\n\t\tthis.addScene = function (newScene) {\n\n\t\t\tif (this._options.addIndicators && newScene instanceof ScrollMagic.Scene && newScene.controller() === Controller) {\n\t\t\t\tnewScene.addIndicators();\n\t\t\t}\n\t\t\t// call original destroy method\n\t\t\tthis.$super.addScene.apply(this, arguments);\n\t\t};\n\n\t\t// remove all previously set listeners on destroy\n\t\tthis.destroy = function () {\n\t\t\t_container.removeEventListener(\"resize\", handleTriggerPositionChange);\n\t\t\tif (!_isDocument) {\n\t\t\t\twindow.removeEventListener(\"resize\", handleTriggerPositionChange);\n\t\t\t\twindow.removeEventListener(\"scroll\", handleTriggerPositionChange);\n\t\t\t}\n\t\t\t_container.removeEventListener(\"resize\", handleBoundsPositionChange);\n\t\t\t_container.removeEventListener(\"scroll\", handleBoundsPositionChange);\n\t\t\t// call original destroy method\n\t\t\tthis.$super.destroy.apply(this, arguments);\n\t\t};\n\t\treturn Controller;\n\t});\n\n\t/*\r\n  * ----------------------------------------------------------------\r\n  * Internal class for the construction of Indicators\r\n  * ----------------------------------------------------------------\r\n  */\n\tvar Indicator = function Indicator(Scene, options) {\n\t\tvar Indicator = this,\n\t\t    _elemBounds = TPL.bounds(),\n\t\t    _elemStart = TPL.start(options.colorStart),\n\t\t    _elemEnd = TPL.end(options.colorEnd),\n\t\t    _boundsContainer = options.parent && _util.get.elements(options.parent)[0],\n\t\t    _vertical,\n\t\t    _ctrl;\n\n\t\tvar log = function log() {\n\t\t\tif (Scene._log) {\n\t\t\t\t// not available, when main source minified\n\t\t\t\tArray.prototype.splice.call(arguments, 1, 0, \"(\" + NAMESPACE + \")\", \"->\");\n\t\t\t\tScene._log.apply(this, arguments);\n\t\t\t}\n\t\t};\n\n\t\toptions.name = options.name || _autoindex;\n\n\t\t// prepare bounds elements\n\t\t_elemStart.firstChild.textContent += \" \" + options.name;\n\t\t_elemEnd.textContent += \" \" + options.name;\n\t\t_elemBounds.appendChild(_elemStart);\n\t\t_elemBounds.appendChild(_elemEnd);\n\n\t\t// set public variables\n\t\tIndicator.options = options;\n\t\tIndicator.bounds = _elemBounds;\n\t\t// will be set later\n\t\tIndicator.triggerGroup = undefined;\n\n\t\t// add indicators to DOM\n\t\tthis.add = function () {\n\t\t\t_ctrl = Scene.controller();\n\t\t\t_vertical = _ctrl.info(\"vertical\");\n\n\t\t\tvar isDocument = _ctrl.info(\"isDocument\");\n\n\t\t\tif (!_boundsContainer) {\n\t\t\t\t// no parent supplied or doesnt exist\n\t\t\t\t_boundsContainer = isDocument ? document.body : _ctrl.info(\"container\"); // check if window/document (then use body)\n\t\t\t}\n\t\t\tif (!isDocument && _util.css(_boundsContainer, \"position\") === 'static') {\n\t\t\t\t// position mode needed for correct positioning of indicators\n\t\t\t\t_util.css(_boundsContainer, {\n\t\t\t\t\tposition: \"relative\"\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// add listeners for updates\n\t\t\tScene.on(\"change.plugin_addIndicators\", handleTriggerParamsChange);\n\t\t\tScene.on(\"shift.plugin_addIndicators\", handleBoundsParamsChange);\n\n\t\t\t// updates trigger & bounds (will add elements if needed)\n\t\t\tupdateTriggerGroup();\n\t\t\tupdateBounds();\n\n\t\t\tsetTimeout(function () {\n\t\t\t\t// do after all execution is finished otherwise sometimes size calculations are off\n\t\t\t\t_ctrl._indicators.updateBoundsPositions(Indicator);\n\t\t\t}, 0);\n\n\t\t\tlog(3, \"added indicators\");\n\t\t};\n\n\t\t// remove indicators from DOM\n\t\tthis.remove = function () {\n\t\t\tif (Indicator.triggerGroup) {\n\t\t\t\t// if not set there's nothing to remove\n\t\t\t\tScene.off(\"change.plugin_addIndicators\", handleTriggerParamsChange);\n\t\t\t\tScene.off(\"shift.plugin_addIndicators\", handleBoundsParamsChange);\n\n\t\t\t\tif (Indicator.triggerGroup.members.length > 1) {\n\t\t\t\t\t// just remove from memberlist of old group\n\t\t\t\t\tvar group = Indicator.triggerGroup;\n\t\t\t\t\tgroup.members.splice(group.members.indexOf(Indicator), 1);\n\t\t\t\t\t_ctrl._indicators.updateTriggerGroupLabel(group);\n\t\t\t\t\t_ctrl._indicators.updateTriggerGroupPositions(group);\n\t\t\t\t\tIndicator.triggerGroup = undefined;\n\t\t\t\t} else {\n\t\t\t\t\t// remove complete group\n\t\t\t\t\tremoveTriggerGroup();\n\t\t\t\t}\n\t\t\t\tremoveBounds();\n\n\t\t\t\tlog(3, \"removed indicators\");\n\t\t\t}\n\t\t};\n\n\t\t/*\r\n   * ----------------------------------------------------------------\r\n   * internal Event Handlers\r\n   * ----------------------------------------------------------------\r\n   */\n\n\t\t// event handler for when bounds params change\n\t\tvar handleBoundsParamsChange = function handleBoundsParamsChange() {\n\t\t\tupdateBounds();\n\t\t};\n\n\t\t// event handler for when trigger params change\n\t\tvar handleTriggerParamsChange = function handleTriggerParamsChange(e) {\n\t\t\tif (e.what === \"triggerHook\") {\n\t\t\t\tupdateTriggerGroup();\n\t\t\t}\n\t\t};\n\n\t\t/*\r\n   * ----------------------------------------------------------------\r\n   * Bounds (start / stop) management\r\n   * ----------------------------------------------------------------\r\n   */\n\n\t\t// adds an new bounds elements to the array and to the DOM\n\t\tvar addBounds = function addBounds() {\n\t\t\tvar v = _ctrl.info(\"vertical\");\n\t\t\t// apply stuff we didn't know before...\n\t\t\t_util.css(_elemStart.firstChild, {\n\t\t\t\t\"border-bottom-width\": v ? 1 : 0,\n\t\t\t\t\"border-right-width\": v ? 0 : 1,\n\t\t\t\t\"bottom\": v ? -1 : options.indent,\n\t\t\t\t\"right\": v ? options.indent : -1,\n\t\t\t\t\"padding\": v ? \"0 8px\" : \"2px 4px\"\n\t\t\t});\n\t\t\t_util.css(_elemEnd, {\n\t\t\t\t\"border-top-width\": v ? 1 : 0,\n\t\t\t\t\"border-left-width\": v ? 0 : 1,\n\t\t\t\t\"top\": v ? \"100%\" : \"\",\n\t\t\t\t\"right\": v ? options.indent : \"\",\n\t\t\t\t\"bottom\": v ? \"\" : options.indent,\n\t\t\t\t\"left\": v ? \"\" : \"100%\",\n\t\t\t\t\"padding\": v ? \"0 8px\" : \"2px 4px\"\n\t\t\t});\n\t\t\t// append\n\t\t\t_boundsContainer.appendChild(_elemBounds);\n\t\t};\n\n\t\t// remove bounds from list and DOM\n\t\tvar removeBounds = function removeBounds() {\n\t\t\t_elemBounds.parentNode.removeChild(_elemBounds);\n\t\t};\n\n\t\t// update the start and end positions of the scene\n\t\tvar updateBounds = function updateBounds() {\n\t\t\tif (_elemBounds.parentNode !== _boundsContainer) {\n\t\t\t\taddBounds(); // Add Bounds elements (start/end)\n\t\t\t}\n\t\t\tvar css = {};\n\t\t\tcss[_vertical ? \"top\" : \"left\"] = Scene.triggerPosition();\n\t\t\tcss[_vertical ? \"height\" : \"width\"] = Scene.duration();\n\t\t\t_util.css(_elemBounds, css);\n\t\t\t_util.css(_elemEnd, {\n\t\t\t\tdisplay: Scene.duration() > 0 ? \"\" : \"none\"\n\t\t\t});\n\t\t};\n\n\t\t/*\r\n   * ----------------------------------------------------------------\r\n   * trigger and trigger group management\r\n   * ----------------------------------------------------------------\r\n   */\n\n\t\t// adds an new trigger group to the array and to the DOM\n\t\tvar addTriggerGroup = function addTriggerGroup() {\n\t\t\tvar triggerElem = TPL.trigger(options.colorTrigger); // new trigger element\n\t\t\tvar css = {};\n\t\t\tcss[_vertical ? \"right\" : \"bottom\"] = 0;\n\t\t\tcss[_vertical ? \"border-top-width\" : \"border-left-width\"] = 1;\n\t\t\t_util.css(triggerElem.firstChild, css);\n\t\t\t_util.css(triggerElem.firstChild.firstChild, {\n\t\t\t\tpadding: _vertical ? \"0 8px 3px 8px\" : \"3px 4px\"\n\t\t\t});\n\t\t\tdocument.body.appendChild(triggerElem); // directly add to body\n\t\t\tvar newGroup = {\n\t\t\t\ttriggerHook: Scene.triggerHook(),\n\t\t\t\telement: triggerElem,\n\t\t\t\tmembers: [Indicator]\n\t\t\t};\n\t\t\t_ctrl._indicators.groups.push(newGroup);\n\t\t\tIndicator.triggerGroup = newGroup;\n\t\t\t// update right away\n\t\t\t_ctrl._indicators.updateTriggerGroupLabel(newGroup);\n\t\t\t_ctrl._indicators.updateTriggerGroupPositions(newGroup);\n\t\t};\n\n\t\tvar removeTriggerGroup = function removeTriggerGroup() {\n\t\t\t_ctrl._indicators.groups.splice(_ctrl._indicators.groups.indexOf(Indicator.triggerGroup), 1);\n\t\t\tIndicator.triggerGroup.element.parentNode.removeChild(Indicator.triggerGroup.element);\n\t\t\tIndicator.triggerGroup = undefined;\n\t\t};\n\n\t\t// updates the trigger group -> either join existing or add new one\n\t\t/*\t\r\n   * Logic:\r\n   * 1 if a trigger group exist, check if it's in sync with Scene settings – if so, nothing else needs to happen\r\n   * 2 try to find an existing one that matches Scene parameters\r\n   * \t 2.1 If a match is found check if already assigned to an existing group\r\n   *\t\t\t If so:\r\n   *       A: it was the last member of existing group -> kill whole group\r\n   *       B: the existing group has other members -> just remove from member list\r\n   *\t 2.2 Assign to matching group\r\n   * 3 if no new match could be found, check if assigned to existing group\r\n   *   A: yes, and it's the only member -> just update parameters and positions and keep using this group\r\n   *   B: yes but there are other members -> remove from member list and create a new one\r\n   *   C: no, so create a new one\r\n   */\n\t\tvar updateTriggerGroup = function updateTriggerGroup() {\n\t\t\tvar triggerHook = Scene.triggerHook(),\n\t\t\t    closeEnough = 0.0001;\n\n\t\t\t// Have a group, check if it still matches\n\t\t\tif (Indicator.triggerGroup) {\n\t\t\t\tif (Math.abs(Indicator.triggerGroup.triggerHook - triggerHook) < closeEnough) {\n\t\t\t\t\t// _util.log(0, \"trigger\", options.name, \"->\", \"no need to change, still in sync\");\n\t\t\t\t\treturn; // all good\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Don't have a group, check if a matching one exists\n\t\t\t// _util.log(0, \"trigger\", options.name, \"->\", \"out of sync!\");\n\t\t\tvar groups = _ctrl._indicators.groups,\n\t\t\t    group,\n\t\t\t    i = groups.length;\n\t\t\twhile (i--) {\n\t\t\t\tgroup = groups[i];\n\t\t\t\tif (Math.abs(group.triggerHook - triggerHook) < closeEnough) {\n\t\t\t\t\t// found a match!\n\t\t\t\t\t// _util.log(0, \"trigger\", options.name, \"->\", \"found match\");\n\t\t\t\t\tif (Indicator.triggerGroup) {\n\t\t\t\t\t\t// do I have an old group that is out of sync?\n\t\t\t\t\t\tif (Indicator.triggerGroup.members.length === 1) {\n\t\t\t\t\t\t\t// is it the only remaining group?\n\t\t\t\t\t\t\t// _util.log(0, \"trigger\", options.name, \"->\", \"kill\");\n\t\t\t\t\t\t\t// was the last member, remove the whole group\n\t\t\t\t\t\t\tremoveTriggerGroup();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tIndicator.triggerGroup.members.splice(Indicator.triggerGroup.members.indexOf(Indicator), 1); // just remove from memberlist of old group\n\t\t\t\t\t\t\t_ctrl._indicators.updateTriggerGroupLabel(Indicator.triggerGroup);\n\t\t\t\t\t\t\t_ctrl._indicators.updateTriggerGroupPositions(Indicator.triggerGroup);\n\t\t\t\t\t\t\t// _util.log(0, \"trigger\", options.name, \"->\", \"removing from previous member list\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// join new group\n\t\t\t\t\tgroup.members.push(Indicator);\n\t\t\t\t\tIndicator.triggerGroup = group;\n\t\t\t\t\t_ctrl._indicators.updateTriggerGroupLabel(group);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// at this point I am obviously out of sync and don't match any other group\n\t\t\tif (Indicator.triggerGroup) {\n\t\t\t\tif (Indicator.triggerGroup.members.length === 1) {\n\t\t\t\t\t// _util.log(0, \"trigger\", options.name, \"->\", \"updating existing\");\n\t\t\t\t\t// out of sync but i'm the only member => just change and update\n\t\t\t\t\tIndicator.triggerGroup.triggerHook = triggerHook;\n\t\t\t\t\t_ctrl._indicators.updateTriggerGroupPositions(Indicator.triggerGroup);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\t// _util.log(0, \"trigger\", options.name, \"->\", \"removing from previous member list\");\n\t\t\t\t\tIndicator.triggerGroup.members.splice(Indicator.triggerGroup.members.indexOf(Indicator), 1); // just remove from memberlist of old group\n\t\t\t\t\t_ctrl._indicators.updateTriggerGroupLabel(Indicator.triggerGroup);\n\t\t\t\t\t_ctrl._indicators.updateTriggerGroupPositions(Indicator.triggerGroup);\n\t\t\t\t\tIndicator.triggerGroup = undefined; // need a brand new group...\n\t\t\t\t}\n\t\t\t}\n\t\t\t// _util.log(0, \"trigger\", options.name, \"->\", \"add a new one\");\n\t\t\t// did not find any match, make new trigger group\n\t\t\taddTriggerGroup();\n\t\t};\n\t};\n\n\t/*\r\n  * ----------------------------------------------------------------\r\n  * Templates for the indicators\r\n  * ----------------------------------------------------------------\r\n  */\n\tvar TPL = {\n\t\tstart: function start(color) {\n\t\t\t// inner element (for bottom offset -1, while keeping top position 0)\n\t\t\tvar inner = document.createElement(\"div\");\n\t\t\tinner.textContent = \"start\";\n\t\t\t_util.css(inner, {\n\t\t\t\tposition: \"absolute\",\n\t\t\t\toverflow: \"visible\",\n\t\t\t\t\"border-width\": 0,\n\t\t\t\t\"border-style\": \"solid\",\n\t\t\t\tcolor: color,\n\t\t\t\t\"border-color\": color\n\t\t\t});\n\t\t\tvar e = document.createElement('div');\n\t\t\t// wrapper\n\t\t\t_util.css(e, {\n\t\t\t\tposition: \"absolute\",\n\t\t\t\toverflow: \"visible\",\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t});\n\t\t\te.appendChild(inner);\n\t\t\treturn e;\n\t\t},\n\t\tend: function end(color) {\n\t\t\tvar e = document.createElement('div');\n\t\t\te.textContent = \"end\";\n\t\t\t_util.css(e, {\n\t\t\t\tposition: \"absolute\",\n\t\t\t\toverflow: \"visible\",\n\t\t\t\t\"border-width\": 0,\n\t\t\t\t\"border-style\": \"solid\",\n\t\t\t\tcolor: color,\n\t\t\t\t\"border-color\": color\n\t\t\t});\n\t\t\treturn e;\n\t\t},\n\t\tbounds: function bounds() {\n\t\t\tvar e = document.createElement('div');\n\t\t\t_util.css(e, {\n\t\t\t\tposition: \"absolute\",\n\t\t\t\toverflow: \"visible\",\n\t\t\t\t\"white-space\": \"nowrap\",\n\t\t\t\t\"pointer-events\": \"none\",\n\t\t\t\t\"font-size\": FONT_SIZE\n\t\t\t});\n\t\t\te.style.zIndex = ZINDEX;\n\t\t\treturn e;\n\t\t},\n\t\ttrigger: function trigger(color) {\n\t\t\t// inner to be above or below line but keep position\n\t\t\tvar inner = document.createElement('div');\n\t\t\tinner.textContent = \"trigger\";\n\t\t\t_util.css(inner, {\n\t\t\t\tposition: \"relative\"\n\t\t\t});\n\t\t\t// inner wrapper for right: 0 and main element has no size\n\t\t\tvar w = document.createElement('div');\n\t\t\t_util.css(w, {\n\t\t\t\tposition: \"absolute\",\n\t\t\t\toverflow: \"visible\",\n\t\t\t\t\"border-width\": 0,\n\t\t\t\t\"border-style\": \"solid\",\n\t\t\t\tcolor: color,\n\t\t\t\t\"border-color\": color\n\t\t\t});\n\t\t\tw.appendChild(inner);\n\t\t\t// wrapper\n\t\t\tvar e = document.createElement('div');\n\t\t\t_util.css(e, {\n\t\t\t\tposition: \"fixed\",\n\t\t\t\toverflow: \"visible\",\n\t\t\t\t\"white-space\": \"nowrap\",\n\t\t\t\t\"pointer-events\": \"none\",\n\t\t\t\t\"font-size\": FONT_SIZE\n\t\t\t});\n\t\t\te.style.zIndex = ZINDEX;\n\t\t\te.appendChild(w);\n\t\t\treturn e;\n\t\t}\n\t};\n}\n\ndebugAddIndicators(ScrollMagic);\n\nvar refOrInnerRef = function refOrInnerRef(child) {\n  if (child.type && child.type.$$typeof && child.type.$$typeof.toString() === 'Symbol(react.forward_ref)') {\n    return 'ref';\n  }\n\n  // styled-components < 4\n  if (child.type && child.type.styledComponentId) {\n    return 'innerRef';\n  }\n\n  return 'ref';\n};\n\nvar isGSAP = function isGSAP(child) {\n  if (react__WEBPACK_IMPORTED_MODULE_0___default().Children.count(child) === 1 && child.type && (child.type.displayName === 'Tween' || child.type.displayName === 'Timeline')) {\n    return true;\n  }\n  return false;\n};\n\nvar controlGSAP = function controlGSAP(child, progress, event) {\n  if (isGSAP(child)) {\n    var props = _extends({}, child.props, { totalProgress: progress, paused: true });\n    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\n      'div',\n      null,\n      react__WEBPACK_IMPORTED_MODULE_0___default().createElement(child.type, props)\n    );\n  }\n  return child;\n};\n\nvar callChildFunction = function callChildFunction(children, progress, event) {\n  if (children && typeof children === 'function') {\n    return children(progress, event);\n  }\n  return children;\n};\n\nvar getChild = function getChild(children, progress, event) {\n  children = controlGSAP(children, progress, event);\n  children = callChildFunction(children, progress, event);\n  return react__WEBPACK_IMPORTED_MODULE_0___default().Children.only(children);\n};\n\nvar isString = function isString(element) {\n  if (typeof element === 'string' || element instanceof String) {\n    return true;\n  }\n  return false;\n};\n\nvar SceneBase = function (_React$PureComponent) {\n  inherits(SceneBase, _React$PureComponent);\n\n  function SceneBase() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, SceneBase);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SceneBase.__proto__ || Object.getPrototypeOf(SceneBase)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      event: 'init',\n      progress: 0\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(SceneBase, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          children = _props.children,\n          controller = _props.controller,\n          classToggle = _props.classToggle,\n          pin = _props.pin,\n          pinSettings = _props.pinSettings,\n          indicators = _props.indicators,\n          enabled = _props.enabled,\n          sceneParams = objectWithoutProperties(_props, ['children', 'controller', 'classToggle', 'pin', 'pinSettings', 'indicators', 'enabled']);\n\n\n      var element = this.ref;\n      sceneParams.triggerElement = sceneParams.triggerElement === null ? null : sceneParams.triggerElement || element;\n\n      this.scene = new ScrollMagic.Scene(sceneParams);\n\n      this.initEventHandlers();\n\n      if (classToggle) {\n        this.setClassToggle(this.scene, element, classToggle);\n      }\n\n      if (pin || pinSettings) {\n        this.setPin(this.scene, element, pin, pinSettings);\n      }\n\n      if (indicators) {\n        this.scene.addIndicators({ name: ' ' });\n      }\n\n      if (enabled !== undefined) {\n        this.scene.enabled(enabled);\n      }\n\n      this.scene.addTo(controller);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _props2 = this.props,\n          duration = _props2.duration,\n          offset = _props2.offset,\n          triggerElement = _props2.triggerElement,\n          triggerHook = _props2.triggerHook,\n          reverse = _props2.reverse,\n          enabled = _props2.enabled;\n\n\n      if (duration !== undefined && duration !== prevProps.duration) {\n        this.scene.duration(duration);\n      }\n\n      if (offset !== undefined && offset !== prevProps.offset) {\n        this.scene.offset(offset);\n      }\n\n      if (triggerElement !== undefined && triggerElement !== prevProps.triggerElement) ;\n\n      if (triggerHook !== undefined && triggerHook !== prevProps.triggerHook) {\n        this.scene.triggerHook(triggerHook);\n      }\n\n      if (reverse !== undefined && reverse !== prevProps.reverse) {\n        this.scene.reverse(reverse);\n      }\n\n      if (enabled !== undefined && enabled !== prevProps.enabled) {\n        this.scene.enabled(enabled);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.scene.destroy();\n    }\n  }, {\n    key: 'setClassToggle',\n    value: function setClassToggle(scene, element, classToggle) {\n      if (Array.isArray(classToggle) && classToggle.length === 2) {\n        scene.setClassToggle(classToggle[0], classToggle[1]);\n      } else {\n        scene.setClassToggle(element, classToggle);\n      }\n    }\n  }, {\n    key: 'setPin',\n    value: function setPin(scene, element, pin, pinSettings) {\n      element = isString(pin) ? pin : element;\n      scene.setPin(element, pinSettings);\n    }\n  }, {\n    key: 'initEventHandlers',\n    value: function initEventHandlers() {\n      var _this2 = this;\n\n      var _props3 = this.props,\n          children = _props3.children,\n          _props3$progressEvent = _props3.progressEvents,\n          progressEvents = _props3$progressEvent === undefined ? true : _props3$progressEvent;\n\n\n      if (typeof children !== 'function' && !isGSAP(callChildFunction(children, 0, 'init'))) {\n        return;\n      }\n\n      this.scene.on('start end enter leave', function (event) {\n        _this2.setState({\n          event: event\n        });\n      });\n\n      if (progressEvents) {\n        this.scene.on('progress', function (event) {\n          _this2.setState({\n            progress: event.progress\n          });\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var children = this.props.children;\n      var _state = this.state,\n          progress = _state.progress,\n          event = _state.event;\n\n\n      var child = getChild(children, progress, event);\n\n      // TODO: Don't add ref to stateless or stateful components \n\n      return react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(child, defineProperty({}, refOrInnerRef(child), function (ref) {\n        return _this3.ref = ref;\n      }));\n    }\n  }]);\n  return SceneBase;\n}((react__WEBPACK_IMPORTED_MODULE_0___default().PureComponent));\n\nvar SceneWrapper = function (_React$PureComponent2) {\n  inherits(SceneWrapper, _React$PureComponent2);\n\n  function SceneWrapper() {\n    classCallCheck(this, SceneWrapper);\n    return possibleConstructorReturn(this, (SceneWrapper.__proto__ || Object.getPrototypeOf(SceneWrapper)).apply(this, arguments));\n  }\n\n  createClass(SceneWrapper, [{\n    key: 'render',\n    value: function render() {\n      if (!this.props.controller) {\n        var _children = this.props.children;\n\n        var _progress = 0;\n        var _event = 'init';\n\n        return getChild(_children, _progress, _event);\n      }\n\n      return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(SceneBase, this.props);\n    }\n  }]);\n  return SceneWrapper;\n}((react__WEBPACK_IMPORTED_MODULE_0___default().PureComponent));\n\nSceneWrapper.displayName = 'Scene';\nvar Scene = function Scene(_ref2) {\n  var children = _ref2.children,\n      props = objectWithoutProperties(_ref2, ['children']);\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\n    ControllerContext.Consumer,\n    null,\n    function (controller) {\n      return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\n        SceneWrapper,\n        _extends({ controller: controller }, props),\n        children\n      );\n    }\n  );\n};\n\n\n//# sourceMappingURL=index.es.js.map\n\n\n//# sourceURL=webpack://minimal-react-webpack-babel-setup/../node_modules/react-scrollmagic/dist/index.es.js?");

/***/ }),

/***/ "../../../../node_modules/object-assign/index.js":
/*!*******************************************************!*\
  !*** ../../../../node_modules/object-assign/index.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n//# sourceURL=webpack://minimal-react-webpack-babel-setup/../../../../node_modules/object-assign/index.js?");

/***/ }),

/***/ "../../../../node_modules/prop-types/checkPropTypes.js":
/*!*************************************************************!*\
  !*** ../../../../node_modules/prop-types/checkPropTypes.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar printWarning = function() {};\n\nif (true) {\n  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"../../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (true) {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (true) {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n\n\n//# sourceURL=webpack://minimal-react-webpack-babel-setup/../../../../node_modules/prop-types/checkPropTypes.js?");

/***/ }),

/***/ "../../../../node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!***********************************************************************!*\
  !*** ../../../../node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n\n\n//# sourceURL=webpack://minimal-react-webpack-babel-setup/../../../../node_modules/prop-types/lib/ReactPropTypesSecret.js?");

/***/ }),

/***/ "../../../../node_modules/react/cjs/react.development.js":
/*!***************************************************************!*\
  !*** ../../../../node_modules/react/cjs/react.development.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/** @license React v16.11.0\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar _assign = __webpack_require__(/*! object-assign */ \"../../../../node_modules/object-assign/index.js\");\nvar checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ \"../../../../node_modules/prop-types/checkPropTypes.js\");\n\n// TODO: this is special because it gets imported during build.\n\nvar ReactVersion = '16.11.0';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\n\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n// Do not require this module directly! Use normal `invariant` calls with\n// template literal strings. The messages will be replaced with error codes\n// during build.\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\n/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\nvar lowPriorityWarningWithoutStack = function () {};\n\n{\n  var printWarning = function (format) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n\n    if (typeof console !== 'undefined') {\n      console.warn(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  lowPriorityWarningWithoutStack = function (condition, format) {\n    if (format === undefined) {\n      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (!condition) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(void 0, [format].concat(args));\n    }\n  };\n}\n\nvar lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\nvar warningWithoutStack = function () {};\n\n{\n  warningWithoutStack = function (condition, format) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if (format === undefined) {\n      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (args.length > 8) {\n      // Check before the condition to catch violations early.\n      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');\n    }\n\n    if (condition) {\n      return;\n    }\n\n    if (typeof console !== 'undefined') {\n      var argsWithFormat = args.map(function (item) {\n        return '' + item;\n      });\n      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n      // breaks IE9: https://github.com/facebook/react/issues/13610\n\n      Function.prototype.apply.call(console.error, console, argsWithFormat);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nvar warningWithoutStack$1 = warningWithoutStack;\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + \".\" + callerName;\n\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n\n    warningWithoutStack$1(false, \"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n/**\n * This is the abstract API for an update queue.\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {\n    {\n      throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");\n    }\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        lowPriorityWarningWithoutStack$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n        return undefined;\n      }\n    });\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n_assign(pureComponentPrototype, Component.prototype);\n\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n\n  {\n    Object.seal(refObject);\n  }\n\n  return refObject;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nvar ReactCurrentBatchConfig = {\n  suspense: null\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\nvar describeComponentFrame = function (name, source, ownerName) {\n  var sourceInfo = '';\n\n  if (source) {\n    var path = source.fileName;\n    var fileName = path.replace(BEFORE_SLASH_RE, '');\n\n    {\n      // In DEV, include code for a common special case:\n      // prefer \"folder/index.js\" instead of just \"index.js\".\n      if (/^index\\./.test(fileName)) {\n        var match = path.match(BEFORE_SLASH_RE);\n\n        if (match) {\n          var pathBeforeSlash = match[1];\n\n          if (pathBeforeSlash) {\n            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n            fileName = folderName + '/' + fileName;\n          }\n        }\n      }\n    }\n\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n};\n\nvar Resolved = 1;\n\nfunction refineResolvedLazyComponent(lazyComponent) {\n  return lazyComponent._status === Resolved ? lazyComponent._result : null;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return \"Profiler\";\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        return 'Context.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        return 'Context.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_LAZY_TYPE:\n        {\n          var thenable = type;\n          var resolvedThenable = refineResolvedLazyComponent(thenable);\n\n          if (resolvedThenable) {\n            return getComponentName(resolvedThenable);\n          }\n\n          break;\n        }\n    }\n  }\n\n  return null;\n}\n\nvar ReactDebugCurrentFrame = {};\nvar currentlyValidatingElement = null;\nfunction setCurrentlyValidatingElement(element) {\n  {\n    currentlyValidatingElement = element;\n  }\n}\n\n{\n  // Stack implementation injected by the current renderer.\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var stack = ''; // Add an extra top frame while an element is being validated\n\n    if (currentlyValidatingElement) {\n      var name = getComponentName(currentlyValidatingElement.type);\n      var owner = currentlyValidatingElement._owner;\n      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));\n    } // Delegate to the injected renderer-specific implementation\n\n\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\n/**\n * Used by act() to track whether you're inside an act() scope.\n */\nvar IsSomeRendererActing = {\n  current: false\n};\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher,\n  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner,\n  IsSomeRendererActing: IsSomeRendererActing,\n  // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n  assign: _assign\n};\n\n{\n  _assign(ReactSharedInternals, {\n    // These should not be included in production.\n    ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n    // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n    // TODO: remove in React 17.0.\n    ReactComponentTreeHook: {}\n  });\n}\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = warningWithoutStack$1;\n\n{\n  warning = function (condition, format) {\n    if (condition) {\n      return;\n    }\n\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    warningWithoutStack$1.apply(void 0, [false, format + '%s'].concat(args, [stack]));\n  };\n}\n\nvar warning$1 = warning;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    if (!specialPropKeyWarningShown) {\n      specialPropKeyWarningShown = true;\n      warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    if (!specialPropRefWarningShown) {\n      specialPropRefWarningShown = true;\n      warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\n\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n\n  if (maybeKey !== undefined) {\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n  } // Remaining properties are added to a new props object\n\n\n  for (propName in config) {\n    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n      props[propName] = config[propName];\n    }\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  if (key || ref) {\n    var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n    if (key) {\n      defineKeyPropWarningGetter(props, displayName);\n    }\n\n    if (ref) {\n      defineRefPropWarningGetter(props, displayName);\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://reactjs.org/docs/react-api.html#createfactory\n */\n\n\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (!!(element === null || element === undefined)) {\n    {\n      throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n    }\n  }\n\n  var propName; // Original props are copied\n\n  var props = _assign({}, element.props); // Reserved names are extracted\n\n\n  var key = element.key;\n  var ref = element.ref; // Self is preserved since the owner is preserved.\n\n  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  var source = element._source; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\n\nvar didWarnAboutMaps = false;\nvar userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n}\n\nvar POOL_SIZE = 10;\nvar traverseContextPool = [];\n\nfunction getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n  if (traverseContextPool.length) {\n    var traverseContext = traverseContextPool.pop();\n    traverseContext.result = mapResult;\n    traverseContext.keyPrefix = keyPrefix;\n    traverseContext.func = mapFunction;\n    traverseContext.context = mapContext;\n    traverseContext.count = 0;\n    return traverseContext;\n  } else {\n    return {\n      result: mapResult,\n      keyPrefix: keyPrefix,\n      func: mapFunction,\n      context: mapContext,\n      count: 0\n    };\n  }\n}\n\nfunction releaseTraverseContext(traverseContext) {\n  traverseContext.result = null;\n  traverseContext.keyPrefix = null;\n  traverseContext.func = null;\n  traverseContext.context = null;\n  traverseContext.count = 0;\n\n  if (traverseContextPool.length < POOL_SIZE) {\n    traverseContextPool.push(traverseContext);\n  }\n}\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\n\n\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === children.entries) {\n          !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(children);\n      var step;\n      var ii = 0;\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getComponentKey(child, ii++);\n        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n\n      {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();\n      }\n\n      var childrenString = '' + children;\n\n      {\n        {\n          throw Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \").\" + addendum);\n        }\n      }\n    }\n  }\n\n  return subtreeCount;\n}\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\n\n\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getComponentKey(component, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof component === 'object' && component !== null && component.key != null) {\n    // Explicit key\n    return escape(component.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func = bookKeeping.func,\n      context = bookKeeping.context;\n  func.call(context, child, bookKeeping.count++);\n}\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\n\n\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n\n  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result = bookKeeping.result,\n      keyPrefix = bookKeeping.keyPrefix,\n      func = bookKeeping.func,\n      context = bookKeeping.context;\n  var mappedChild = func.call(context, child, bookKeeping.count++);\n\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {\n      return c;\n    });\n  } else if (mappedChild != null) {\n    if (isValidElement(mappedChild)) {\n      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }\n\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix = '';\n\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n\n  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\n\n\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  return traverseAllChildren(children, function () {\n    return null;\n  }, null);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {\n    return child;\n  });\n  return result;\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    {\n      throw Error(\"React.Children.only expected to receive a single React element child.\");\n    }\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue, calculateChangedBits) {\n  if (calculateChangedBits === undefined) {\n    calculateChangedBits = null;\n  } else {\n    {\n      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;\n    }\n  }\n\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  var hasWarnedAboutUsingNestedContextConsumers = false;\n  var hasWarnedAboutUsingConsumerProvider = false;\n\n  {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    var Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n      _calculateChangedBits: context._calculateChangedBits\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get: function () {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n            warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n        set: function (_Provider) {\n          context.Provider = _Provider;\n        }\n      },\n      _currentValue: {\n        get: function () {\n          return context._currentValue;\n        },\n        set: function (_currentValue) {\n          context._currentValue = _currentValue;\n        }\n      },\n      _currentValue2: {\n        get: function () {\n          return context._currentValue2;\n        },\n        set: function (_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n      },\n      _threadCount: {\n        get: function () {\n          return context._threadCount;\n        },\n        set: function (_threadCount) {\n          context._threadCount = _threadCount;\n        }\n      },\n      Consumer: {\n        get: function () {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n            warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nfunction lazy(ctor) {\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _ctor: ctor,\n    // React uses these fields to store the result.\n    _status: -1,\n    _result: null\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps;\n    var propTypes;\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        set: function (newDefaultProps) {\n          warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        set: function (newPropTypes) {\n          warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n          propTypes = newPropTypes; // Match production behavior more closely:\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      !( // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object\n      render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;\n    }\n\n    if (render != null) {\n      !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;\n    }\n  }\n\n  return {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n}\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  return {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n}\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher.current;\n\n  if (!(dispatcher !== null)) {\n    {\n      throw Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\");\n    }\n  }\n\n  return dispatcher;\n}\n\nfunction useContext(Context, unstable_observedBits) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\\n\\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0; // TODO: add a more generic warning for invalid values.\n\n    if (Context._context !== undefined) {\n      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n\n      if (realContext.Consumer === Context) {\n        warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n      } else if (realContext.Provider === Context) {\n        warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n      }\n    }\n  }\n\n  return dispatcher.useContext(Context, unstable_observedBits);\n}\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, inputs);\n}\nfunction useLayoutEffect(create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, inputs);\n}\nfunction useCallback(callback, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, inputs);\n}\nfunction useMemo(create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, inputs);\n}\nfunction useImperativeHandle(ref, create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, inputs);\n}\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\nvar emptyObject$1 = {};\nfunction useResponder(responder, listenerProps) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    if (responder == null || responder.$$typeof !== REACT_RESPONDER_TYPE) {\n      warning$1(false, 'useResponder: invalid first argument. Expected an event responder, but instead got %s', responder);\n      return;\n    }\n  }\n\n  return dispatcher.useResponder(responder, listenerProps || emptyObject$1);\n}\nfunction useTransition(config) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useTransition(config);\n}\nfunction useDeferredValue(value, config) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useDeferredValue(value, config);\n}\n\nfunction withSuspenseConfig(scope, config) {\n  var previousConfig = ReactCurrentBatchConfig.suspense;\n  ReactCurrentBatchConfig.suspense = config === undefined ? null : config;\n\n  try {\n    scope();\n  } finally {\n    ReactCurrentBatchConfig.suspense = previousConfig;\n  }\n}\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n\nvar hasOwnProperty$1 = Object.prototype.hasOwnProperty;\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentName(ReactCurrentOwner.current.type);\n\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (source !== undefined) {\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendumForProps(elementProps) {\n  if (elementProps !== null && elementProps !== undefined) {\n    return getSourceInfoErrorAddendum(elementProps.__source);\n  }\n\n  return '';\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n    }\n  }\n\n  return info;\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwner = '';\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n  }\n\n  setCurrentlyValidatingElement(element);\n\n  {\n    warning$1(false, 'Each child in a list should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);\n  }\n\n  setCurrentlyValidatingElement(null);\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  var type = element.type;\n\n  if (type === null || type === undefined || typeof type === 'string') {\n    return;\n  }\n\n  var name = getComponentName(type);\n  var propTypes;\n\n  if (typeof type === 'function') {\n    propTypes = type.propTypes;\n  } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n  // Inner props are checked in the reconciler.\n  type.$$typeof === REACT_MEMO_TYPE)) {\n    propTypes = type.propTypes;\n  } else {\n    return;\n  }\n\n  if (propTypes) {\n    setCurrentlyValidatingElement(element);\n    checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);\n    setCurrentlyValidatingElement(null);\n  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n    propTypesMisspellWarningShown = true;\n    warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n  }\n\n  if (typeof type.getDefaultProps === 'function') {\n    !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  setCurrentlyValidatingElement(fragment);\n  var keys = Object.keys(fragment.props);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n\n    if (key !== 'children' && key !== 'key') {\n      warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n      break;\n    }\n  }\n\n  if (fragment.ref !== null) {\n    warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');\n  }\n\n  setCurrentlyValidatingElement(null);\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendum(source);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    warning$1(false, 'React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n  }\n\n  var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    var children = props.children;\n\n    if (children !== undefined) {\n      if (isStaticChildren) {\n        if (Array.isArray(children)) {\n          for (var i = 0; i < children.length; i++) {\n            validateChildKeys(children[i], type);\n          }\n\n          if (Object.freeze) {\n            Object.freeze(children);\n          }\n        } else {\n          warning$1(false, 'React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n        }\n      } else {\n        validateChildKeys(children, type);\n      }\n    }\n  }\n\n  if (hasOwnProperty$1.call(props, 'key')) {\n    warning$1(false, 'React.jsx: Spreading a key to JSX is a deprecated pattern. ' + 'Explicitly pass a key after spreading props in your JSX call. ' + 'E.g. <ComponentName {...props} key={key} />');\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n} // These two functions exist to still get child warnings in dev\n// even with the prod transform. This means that jsxDEV is purely\n// opt-in behavior for better messages but that we won't stop\n// giving you warnings if you use production apis.\n\nfunction jsxWithValidationStatic(type, props, key) {\n  return jsxWithValidation(type, props, key, true);\n}\nfunction jsxWithValidationDynamic(type, props, key) {\n  return jsxWithValidation(type, props, key, false);\n}\nfunction createElementWithValidation(type, props, children) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n  }\n\n  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type; // Legacy hook: remove it\n\n  {\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        lowPriorityWarningWithoutStack$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n\n  validatePropTypes(newElement);\n  return newElement;\n}\n\nvar hasBadMapPolyfill;\n\n{\n  hasBadMapPolyfill = false;\n\n  try {\n    var frozenObject = Object.freeze({});\n    var testMap = new Map([[frozenObject, null]]);\n    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.\n    // https://github.com/rollup/rollup/issues/1771\n    // TODO: we can remove these if Rollup fixes the bug.\n\n    testMap.set(0, 0);\n    testSet.add(0);\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction createFundamentalComponent(impl) {\n  // We use responder as a Map key later on. When we have a bad\n  // polyfill, then we can't use it as a key as the polyfill tries\n  // to add a property to the object.\n  if ( true && !hasBadMapPolyfill) {\n    Object.freeze(impl);\n  }\n\n  var fundamantalComponent = {\n    $$typeof: REACT_FUNDAMENTAL_TYPE,\n    impl: impl\n  };\n\n  {\n    Object.freeze(fundamantalComponent);\n  }\n\n  return fundamantalComponent;\n}\n\nfunction createEventResponder(displayName, responderConfig) {\n  var getInitialState = responderConfig.getInitialState,\n      onEvent = responderConfig.onEvent,\n      onMount = responderConfig.onMount,\n      onUnmount = responderConfig.onUnmount,\n      onRootEvent = responderConfig.onRootEvent,\n      rootEventTypes = responderConfig.rootEventTypes,\n      targetEventTypes = responderConfig.targetEventTypes,\n      targetPortalPropagation = responderConfig.targetPortalPropagation;\n  var eventResponder = {\n    $$typeof: REACT_RESPONDER_TYPE,\n    displayName: displayName,\n    getInitialState: getInitialState || null,\n    onEvent: onEvent || null,\n    onMount: onMount || null,\n    onRootEvent: onRootEvent || null,\n    onUnmount: onUnmount || null,\n    rootEventTypes: rootEventTypes || null,\n    targetEventTypes: targetEventTypes || null,\n    targetPortalPropagation: targetPortalPropagation || false\n  }; // We use responder as a Map key later on. When we have a bad\n  // polyfill, then we can't use it as a key as the polyfill tries\n  // to add a property to the object.\n\n  if ( true && !hasBadMapPolyfill) {\n    Object.freeze(eventResponder);\n  }\n\n  return eventResponder;\n}\n\nfunction createScope() {\n  var scopeComponent = {\n    $$typeof: REACT_SCOPE_TYPE\n  };\n\n  {\n    Object.freeze(scopeComponent);\n  }\n\n  return scopeComponent;\n}\n\n// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:\n\n // In some cases, StrictMode should also double-render lifecycles.\n// This can be confusing for tests though,\n// And it can be bad for performance in production.\n// This feature flag can be used to control the behavior:\n\n // To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\n\n // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\n\n // Gather advanced timing metrics for Profiler subtrees.\n\n // Trace which interactions trigger each commit.\n\n // SSR experiments\n\n\n // Only used in www builds.\n\n // Only used in www builds.\n\n // Disable javascript: URL strings in href for XSS protection.\n\n // React Fire: prevent the value and checked attributes from syncing\n// with their related DOM properties\n\n // These APIs will no longer be \"unstable\" in the upcoming 16.7 release,\n// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.\n\nvar exposeConcurrentModeAPIs = false;\n // Experimental React Flare event system and event components support.\n\nvar enableFlareAPI = false; // Experimental Host Component support.\n\nvar enableFundamentalAPI = false; // Experimental Scope support.\n\nvar enableScopeAPI = false; // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107\n\nvar enableJSXTransformAPI = false; // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)\n// Till then, we warn about the missing mock, but still fallback to a sync mode compatible version\n\n // For tests, we flush suspense fallbacks in an act scope;\n// *except* in some of our own tests, where we test incremental loading states.\n\n // Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\n// hydrated or deleted.\n\n // Part of the simplification of React.createElement so we can eventually move\n// from React.createElement to React.jsx\n// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md\n\nvar React = {\n  Children: {\n    map: mapChildren,\n    forEach: forEachChildren,\n    count: countChildren,\n    toArray: toArray,\n    only: onlyChild\n  },\n  createRef: createRef,\n  Component: Component,\n  PureComponent: PureComponent,\n  createContext: createContext,\n  forwardRef: forwardRef,\n  lazy: lazy,\n  memo: memo,\n  useCallback: useCallback,\n  useContext: useContext,\n  useEffect: useEffect,\n  useImperativeHandle: useImperativeHandle,\n  useDebugValue: useDebugValue,\n  useLayoutEffect: useLayoutEffect,\n  useMemo: useMemo,\n  useReducer: useReducer,\n  useRef: useRef,\n  useState: useState,\n  Fragment: REACT_FRAGMENT_TYPE,\n  Profiler: REACT_PROFILER_TYPE,\n  StrictMode: REACT_STRICT_MODE_TYPE,\n  Suspense: REACT_SUSPENSE_TYPE,\n  createElement: createElementWithValidation,\n  cloneElement: cloneElementWithValidation,\n  createFactory: createFactoryWithValidation,\n  isValidElement: isValidElement,\n  version: ReactVersion,\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals\n};\n\nif (exposeConcurrentModeAPIs) {\n  React.useTransition = useTransition;\n  React.useDeferredValue = useDeferredValue;\n  React.SuspenseList = REACT_SUSPENSE_LIST_TYPE;\n  React.unstable_withSuspenseConfig = withSuspenseConfig;\n}\n\nif (enableFlareAPI) {\n  React.unstable_useResponder = useResponder;\n  React.unstable_createResponder = createEventResponder;\n}\n\nif (enableFundamentalAPI) {\n  React.unstable_createFundamental = createFundamentalComponent;\n}\n\nif (enableScopeAPI) {\n  React.unstable_createScope = createScope;\n} // Note: some APIs are added with feature flags.\n// Make sure that stable builds for open source\n// don't modify the React object to avoid deopts.\n// Also let's not expose their names in stable builds.\n\n\nif (enableJSXTransformAPI) {\n  {\n    React.jsxDEV = jsxWithValidation;\n    React.jsx = jsxWithValidationDynamic;\n    React.jsxs = jsxWithValidationStatic;\n  }\n}\n\n\n\nvar React$2 = Object.freeze({\n\tdefault: React\n});\n\nvar React$3 = ( React$2 && React ) || React$2;\n\n// TODO: decide on the top-level export form.\n// This is hacky but makes it work with both Rollup and Jest.\n\n\nvar react = React$3.default || React$3;\n\nmodule.exports = react;\n  })();\n}\n\n\n//# sourceURL=webpack://minimal-react-webpack-babel-setup/../../../../node_modules/react/cjs/react.development.js?");

/***/ }),

/***/ "../../../../node_modules/react/index.js":
/*!***********************************************!*\
  !*** ../../../../node_modules/react/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"../../../../node_modules/react/cjs/react.development.js\");\n}\n\n\n//# sourceURL=webpack://minimal-react-webpack-babel-setup/../../../../node_modules/react/index.js?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ "use strict";
/******/ 
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("cd43196b789e62ea0a77")
/******/ })();
/******/ 
/******/ }
);